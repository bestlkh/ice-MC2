{"version":3,"sources":["alert.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_classCallCheck","instance","TypeError","e","t","n","r","s","o","u","a","require","f","Error","code","l","exports","call","1","module","window","keys","ENTER","ESC","F1","F12","LEFT","RIGHT","defaults","autoReset","basic","closable","closableByDimmer","frameless","maintainFocus","maximizable","modal","movable","moveBounded","overflow","padding","pinnable","pinned","preventBodyShift","resizable","startMaximized","transition","notifier","delay","position","closeButton","glossary","title","ok","cancel","acccpt","deny","confirm","decline","close","maximize","restore","theme","input","openDialogs","addClass","element","classNames","className","removeClass","original","split","toBeRemoved","x","index","indexOf","splice","join","isRightToLeft","getComputedStyle","document","body","direction","getScrollTop","documentElement","scrollTop","getScrollLeft","scrollLeft","clearContents","lastChild","removeChild","copy","src","cpy","Array","isArray","push","Date","getTime","RegExp","source","global","ignoreCase","multiline","lastIndex","prop","hasOwnProperty","destruct","initialize","root","elements","parentNode","settings","__settings","__init","__internal","on","addEventListener","el","event","fn","useCapture","attachEvent","off","removeEventListener","detachEvent","type","supported","transitions","animation","OAnimation","msAnimation","MozAnimation","WebkitAnimation","undefined","style","delegate","context","method","arguments","args","apply","createCloseEvent","button","dispatchEvent","eventType","get","_dialog","scrollX","scrollY","usedKeys","reflow","isSafari","navigator","userAgent","templates","dimmer","dialog","reset","commands","header","content","footer","buttons","primary","auxiliary","resizeHandle","classes","animationIn","animationOut","base","capture","fixed","hidden","maximized","modeless","noSelection","noOverflow","noPadding","pin","prefix","shake","unpinned","setup","setAttribute","options","focus","select","hooks","buttonsDefinition","b","ref","internal","isOpen","activeElement","timerIn","timerOut","onshow","onclosing","onclose","onfocus","onmove","onmoved","onresize","onresized","onmaximize","onmaximized","onrestore","onrestored","resetHandler","beginMoveHandler","beginResizeHandler","bringToFrontHandler","modalClickHandler","buttonsClickHandler","commandsClickHandler","transitionInHandler","transitionOutHandler","destroy","createElement","innerHTML","firstChild","container","nextSibling","buttonTemplate","cloneNode","text","attrs","scope","appendChild","onReset","beginMove","beginResize","_bringToFront","handleTransitionInEvent","handleTransitionOutEvent","opKey","set","alertify","build","restoreScrollPosition","scrollTo","ensureNoOverflow","requiresNoOverflow","isModal","isMaximized","top","topScroll","add","scrollHeight","clientHeight","updateTransition","value","oldValue","offsetWidth","setFocus","optionUpdated","option","newValue","setHeader","unbindModelessEvents","updateAbsPositionFix","bindModelessEvents","removeAbsPositionFix","addAbsPositionFix","bindMovableEvents","resetMove","unbindMovableEvents","bindResizableEvents","resetResize","unbindResizableEvents","onupdate","update","callback","old","result","op","items","found","triggerClose","triggerCallback","invokeOnClose","srcElement","isPinned","_unpin","_pin","_restore","_maximize","marginTop","marginLeft","marginRight","parseInt","left","cancelClick","cancelKeyup","check","idx","disabled","closeEvent","keyupHandler","keyCode","keydownHandler","preventDefault","stopPropagation","resetTarget","querySelector","lastResetElement","clearTimeout","offsetX","offsetY","xProp","yProp","bounds","refreshTop","moveDelegate","moveElement","moveElementBounded","Math","min","maxLeft","max","minLeft","maxTop","minTop","eventSrc","targetTouches","current","offsetLeft","offsetTop","offsetParent","move","endMove","startingLeft","Number","Nan","startingWidth","minWidth","handleOffset","offsetHeight","height","minHeight","width","maxWidth","resize","pageRelative","X","Y","pageX","pageY","clientX","clientY","isRTL","isNaN","diff","abs","resizeElement","endResize","windowResize","this","unpin","bringToFront","moveTo","y","resizeTo","w","parseFloat","h","regex","match","clientWidth","setting","self","k","settingUpdated","item","HTMLElement","setContent","showModal","show","setTimeout","prepare","display","closeOthers","closeAll","openInstances","message","right","bottom","center","visible","updatePosition","_create","div","clickDelegate","getAttribute","dismiss","transitionDone","clearTimers","timer","transitionTimeout","_content","_wait","pushed","wait","insertBefore","clickHandler","ondismiss","clicked","transitionEndHandler","dismissOthers","dismissAll","create","except","clone","slice","dialogs","extend","sub","get_dialog","name","Factory","transient","definition","factory","notify","_message2","success","error","warning","main","_title","_message","_onok","onok","setMessage","label","returnValue","autoConfirm","duration","task","clearAutoConfirm","clearInterval","startAutoConfirm","setInterval","_oncancel","oncancel","labels","defaultFocus","reverseButtons","autoOk","autoCancel","p","_value","define","amd","2","Alert","Confirm","Notification","Image","./dialogs/Alert","./dialogs/Confirm","./overlays/Image","./overlays/Notification","3","alert","alertifyjs","4","okCallback","cancelCallback","5","_src","_width","getElementById","classList","backdrop","image","controls","onclick","outerHTML","zoomInButton","zoomOutButton","6"],"mappings":"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","file":"alert.js","sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function () {\n    function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            }return n[o].exports;\n        }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {\n            s(r[o]);\n        }return s;\n    }return e;\n})()({ 1: [function (require, module, exports) {\n        /**\r\n         * alertifyjs 1.11.0 http://alertifyjs.com\r\n         * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.\r\n         * Copyright 2017 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) \r\n         * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/\n        (function (window) {\n            'use strict';\n\n            /**\r\n             * Keys enum\r\n             * @type {Object}\r\n             */\n\n            var keys = {\n                ENTER: 13,\n                ESC: 27,\n                F1: 112,\n                F12: 123,\n                LEFT: 37,\n                RIGHT: 39\n            };\n            /**\r\n             * Default options \r\n             * @type {Object}\r\n             */\n            var defaults = {\n                autoReset: true,\n                basic: false,\n                closable: true,\n                closableByDimmer: true,\n                frameless: false,\n                maintainFocus: true, //global default not per instance, applies to all dialogs\n                maximizable: true,\n                modal: true,\n                movable: true,\n                moveBounded: false,\n                overflow: true,\n                padding: true,\n                pinnable: true,\n                pinned: true,\n                preventBodyShift: false, //global default not per instance, applies to all dialogs\n                resizable: true,\n                startMaximized: false,\n                transition: 'pulse',\n                notifier: {\n                    delay: 5,\n                    position: 'bottom-right',\n                    closeButton: false\n                },\n                glossary: {\n                    title: 'AlertifyJS',\n                    ok: 'OK',\n                    cancel: 'Cancel',\n                    acccpt: 'Accept',\n                    deny: 'Deny',\n                    confirm: 'Confirm',\n                    decline: 'Decline',\n                    close: 'Close',\n                    maximize: 'Maximize',\n                    restore: 'Restore'\n                },\n                theme: {\n                    input: 'ajs-input',\n                    ok: 'ajs-ok',\n                    cancel: 'ajs-cancel'\n                }\n            };\n\n            //holds open dialogs instances\n            var openDialogs = [];\n\n            /**\r\n             * [Helper]  Adds the specified class(es) to the element.\r\n             *\r\n             * @element {node}      The element\r\n             * @className {string}  One or more space-separated classes to be added to the class attribute of the element.\r\n             * \r\n             * @return {undefined}\r\n             */\n            function addClass(element, classNames) {\n                element.className += ' ' + classNames;\n            }\n\n            /**\r\n             * [Helper]  Removes the specified class(es) from the element.\r\n             *\r\n             * @element {node}      The element\r\n             * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.\r\n             * \r\n             * @return {undefined}\r\n             */\n            function removeClass(element, classNames) {\n                var original = element.className.split(' ');\n                var toBeRemoved = classNames.split(' ');\n                for (var x = 0; x < toBeRemoved.length; x += 1) {\n                    var index = original.indexOf(toBeRemoved[x]);\n                    if (index > -1) {\n                        original.splice(index, 1);\n                    }\n                }\n                element.className = original.join(' ');\n            }\n\n            /**\r\n             * [Helper]  Checks if the document is RTL\r\n             *\r\n             * @return {Boolean} True if the document is RTL, false otherwise.\r\n             */\n            function isRightToLeft() {\n                return window.getComputedStyle(document.body).direction === 'rtl';\n            }\n            /**\r\n             * [Helper]  Get the document current scrollTop\r\n             *\r\n             * @return {Number} current document scrollTop value\r\n             */\n            function getScrollTop() {\n                return document.documentElement && document.documentElement.scrollTop || document.body.scrollTop;\n            }\n\n            /**\r\n             * [Helper]  Get the document current scrollLeft\r\n             *\r\n             * @return {Number} current document scrollLeft value\r\n             */\n            function getScrollLeft() {\n                return document.documentElement && document.documentElement.scrollLeft || document.body.scrollLeft;\n            }\n\n            /**\r\n            * Helper: clear contents\r\n            *\r\n            */\n            function clearContents(element) {\n                while (element.lastChild) {\n                    element.removeChild(element.lastChild);\n                }\n            }\n            /**\r\n             * Extends a given prototype by merging properties from base into sub.\r\n             *\r\n             * @sub {Object} sub The prototype being overwritten.\r\n             * @base {Object} base The prototype being written.\r\n             *\r\n             * @return {Object} The extended prototype.\r\n             */\n            function copy(src) {\n                if (null === src) {\n                    return src;\n                }\n                var cpy;\n                if (Array.isArray(src)) {\n                    cpy = [];\n                    for (var x = 0; x < src.length; x += 1) {\n                        cpy.push(copy(src[x]));\n                    }\n                    return cpy;\n                }\n\n                if (src instanceof Date) {\n                    return new Date(src.getTime());\n                }\n\n                if (src instanceof RegExp) {\n                    cpy = new RegExp(src.source);\n                    cpy.global = src.global;\n                    cpy.ignoreCase = src.ignoreCase;\n                    cpy.multiline = src.multiline;\n                    cpy.lastIndex = src.lastIndex;\n                    return cpy;\n                }\n\n                if ((typeof src === \"undefined\" ? \"undefined\" : _typeof(src)) === 'object') {\n                    cpy = {};\n                    // copy dialog pototype over definition.\n                    for (var prop in src) {\n                        if (src.hasOwnProperty(prop)) {\n                            cpy[prop] = copy(src[prop]);\n                        }\n                    }\n                    return cpy;\n                }\n                return src;\n            }\n            /**\r\n              * Helper: destruct the dialog\r\n              *\r\n              */\n            function destruct(instance, initialize) {\n                //delete the dom and it's references.\n                var root = instance.elements.root;\n                root.parentNode.removeChild(root);\n                delete instance.elements;\n                //copy back initial settings.\n                instance.settings = copy(instance.__settings);\n                //re-reference init function.\n                instance.__init = initialize;\n                //delete __internal variable to allow re-initialization.\n                delete instance.__internal;\n            }\n\n            /**\r\n             * Use a closure to return proper event listener method. Try to use\r\n             * `addEventListener` by default but fallback to `attachEvent` for\r\n             * unsupported browser. The closure simply ensures that the test doesn't\r\n             * happen every time the method is called.\r\n             *\r\n             * @param    {Node}     el    Node element\r\n             * @param    {String}   event Event type\r\n             * @param    {Function} fn    Callback of event\r\n             * @return   {Function}\r\n             */\n            var on = function () {\n                if (document.addEventListener) {\n                    return function (el, event, fn, useCapture) {\n                        el.addEventListener(event, fn, useCapture === true);\n                    };\n                } else if (document.attachEvent) {\n                    return function (el, event, fn) {\n                        el.attachEvent('on' + event, fn);\n                    };\n                }\n            }();\n\n            /**\r\n             * Use a closure to return proper event listener method. Try to use\r\n             * `removeEventListener` by default but fallback to `detachEvent` for\r\n             * unsupported browser. The closure simply ensures that the test doesn't\r\n             * happen every time the method is called.\r\n             *\r\n             * @param    {Node}     el    Node element\r\n             * @param    {String}   event Event type\r\n             * @param    {Function} fn    Callback of event\r\n             * @return   {Function}\r\n             */\n            var off = function () {\n                if (document.removeEventListener) {\n                    return function (el, event, fn, useCapture) {\n                        el.removeEventListener(event, fn, useCapture === true);\n                    };\n                } else if (document.detachEvent) {\n                    return function (el, event, fn) {\n                        el.detachEvent('on' + event, fn);\n                    };\n                }\n            }();\n\n            /**\r\n             * Prevent default event from firing\r\n             *\r\n             * @param  {Event} event Event object\r\n             * @return {undefined}\r\n              function prevent ( event ) {\r\n                if ( event ) {\r\n                    if ( event.preventDefault ) {\r\n                        event.preventDefault();\r\n                    } else {\r\n                        event.returnValue = false;\r\n                    }\r\n                }\r\n            }\r\n            */\n            var transition = function () {\n                var t, type;\n                var supported = false;\n                var transitions = {\n                    'animation': 'animationend',\n                    'OAnimation': 'oAnimationEnd oanimationend',\n                    'msAnimation': 'MSAnimationEnd',\n                    'MozAnimation': 'animationend',\n                    'WebkitAnimation': 'webkitAnimationEnd'\n                };\n\n                for (t in transitions) {\n                    if (document.documentElement.style[t] !== undefined) {\n                        type = transitions[t];\n                        supported = true;\n                        break;\n                    }\n                }\n\n                return {\n                    type: type,\n                    supported: supported\n                };\n            }();\n\n            /**\r\n            * Creates event handler delegate that sends the instance as last argument.\r\n            * \r\n            * @return {Function}    a function wrapper which sends the instance as last argument.\r\n            */\n            function delegate(context, method) {\n                return function () {\n                    if (arguments.length > 0) {\n                        var args = [];\n                        for (var x = 0; x < arguments.length; x += 1) {\n                            args.push(arguments[x]);\n                        }\n                        args.push(context);\n                        return method.apply(context, args);\n                    }\n                    return method.apply(context, [null, context]);\n                };\n            }\n            /**\r\n            * Helper for creating a dialog close event.\r\n            * \r\n            * @return {object}\r\n            */\n            function createCloseEvent(index, button) {\n                return {\n                    index: index,\n                    button: button,\n                    cancel: false\n                };\n            }\n            /**\r\n            * Helper for dispatching events.\r\n            *\r\n            * @param  {string} evenType The type of the event to disptach.\r\n            * @param  {object} instance The dialog instance disptaching the event.\r\n            *\r\n            * @return   {any}   The result of the invoked function.\r\n            */\n            function dispatchEvent(eventType, instance) {\n                if (typeof instance.get(eventType) === 'function') {\n                    return instance.get(eventType).call(instance);\n                }\n            }\n\n            /**\r\n             * Super class for all dialogs\r\n             *\r\n             * @return {Object}\t\tbase dialog prototype\r\n             */\n            var _dialog = function () {\n                var //holds the list of used keys.\n                usedKeys = [],\n\n                //dummy variable, used to trigger dom reflow.\n                reflow = null,\n\n                //condition for detecting safari\n                isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,\n\n                //dialog building blocks\n                templates = {\n                    dimmer: '<div class=\"ajs-dimmer\"></div>',\n                    /*tab index required to fire click event before body focus*/\n                    modal: '<div class=\"ajs-modal\" tabindex=\"0\"></div>',\n                    dialog: '<div class=\"ajs-dialog\" tabindex=\"0\"></div>',\n                    reset: '<button class=\"ajs-reset\"></button>',\n                    commands: '<div class=\"ajs-commands\"><button class=\"ajs-pin\"></button><button class=\"ajs-maximize\"></button><button class=\"ajs-close\"></button></div>',\n                    header: '<div class=\"ajs-header\"></div>',\n                    body: '<div class=\"ajs-body\"></div>',\n                    content: '<div class=\"ajs-content\"></div>',\n                    footer: '<div class=\"ajs-footer\"></div>',\n                    buttons: { primary: '<div class=\"ajs-primary ajs-buttons\"></div>', auxiliary: '<div class=\"ajs-auxiliary ajs-buttons\"></div>' },\n                    button: '<button class=\"ajs-button\"></button>',\n                    resizeHandle: '<div class=\"ajs-handle\"></div>'\n                },\n\n                //common class names\n                classes = {\n                    animationIn: 'ajs-in',\n                    animationOut: 'ajs-out',\n                    base: 'alertify',\n                    basic: 'ajs-basic',\n                    capture: 'ajs-capture',\n                    closable: 'ajs-closable',\n                    fixed: 'ajs-fixed',\n                    frameless: 'ajs-frameless',\n                    hidden: 'ajs-hidden',\n                    maximize: 'ajs-maximize',\n                    maximized: 'ajs-maximized',\n                    maximizable: 'ajs-maximizable',\n                    modeless: 'ajs-modeless',\n                    movable: 'ajs-movable',\n                    noSelection: 'ajs-no-selection',\n                    noOverflow: 'ajs-no-overflow',\n                    noPadding: 'ajs-no-padding',\n                    pin: 'ajs-pin',\n                    pinnable: 'ajs-pinnable',\n                    prefix: 'ajs-',\n                    resizable: 'ajs-resizable',\n                    restore: 'ajs-restore',\n                    shake: 'ajs-shake',\n                    unpinned: 'ajs-unpinned'\n                };\n\n                /**\r\n                 * Helper: initializes the dialog instance\r\n                 * \r\n                 * @return\t{Number}\tThe total count of currently open modals.\r\n                 */\n                function initialize(instance) {\n\n                    if (!instance.__internal) {\n\n                        //no need to expose init after this.\n                        delete instance.__init;\n\n                        //keep a copy of initial dialog settings\n                        if (!instance.__settings) {\n                            instance.__settings = copy(instance.settings);\n                        }\n                        //in case the script was included before body.\n                        //after first dialog gets initialized, it won't be null anymore!\n                        if (null === reflow) {\n                            // set tabindex attribute on body element this allows script to give it\n                            // focus after the dialog is closed\n                            document.body.setAttribute('tabindex', '0');\n                        }\n\n                        //get dialog buttons/focus setup\n                        var setup;\n                        if (typeof instance.setup === 'function') {\n                            setup = instance.setup();\n                            setup.options = setup.options || {};\n                            setup.focus = setup.focus || {};\n                        } else {\n                            setup = {\n                                buttons: [],\n                                focus: {\n                                    element: null,\n                                    select: false\n                                },\n                                options: {}\n                            };\n                        }\n\n                        //initialize hooks object.\n                        if (_typeof(instance.hooks) !== 'object') {\n                            instance.hooks = {};\n                        }\n\n                        //copy buttons defintion\n                        var buttonsDefinition = [];\n                        if (Array.isArray(setup.buttons)) {\n                            for (var b = 0; b < setup.buttons.length; b += 1) {\n                                var ref = setup.buttons[b],\n                                    cpy = {};\n                                for (var i in ref) {\n                                    if (ref.hasOwnProperty(i)) {\n                                        cpy[i] = ref[i];\n                                    }\n                                }\n                                buttonsDefinition.push(cpy);\n                            }\n                        }\n\n                        var internal = instance.__internal = {\n                            /**\r\n                             * Flag holding the open state of the dialog\r\n                             * \r\n                             * @type {Boolean}\r\n                             */\n                            isOpen: false,\n                            /**\r\n                             * Active element is the element that will receive focus after\r\n                             * closing the dialog. It defaults as the body tag, but gets updated\r\n                             * to the last focused element before the dialog was opened.\r\n                             *\r\n                             * @type {Node}\r\n                             */\n                            activeElement: document.body,\n                            timerIn: undefined,\n                            timerOut: undefined,\n                            buttons: buttonsDefinition,\n                            focus: setup.focus,\n                            options: {\n                                title: undefined,\n                                modal: undefined,\n                                basic: undefined,\n                                frameless: undefined,\n                                pinned: undefined,\n                                movable: undefined,\n                                moveBounded: undefined,\n                                resizable: undefined,\n                                autoReset: undefined,\n                                closable: undefined,\n                                closableByDimmer: undefined,\n                                maximizable: undefined,\n                                startMaximized: undefined,\n                                pinnable: undefined,\n                                transition: undefined,\n                                padding: undefined,\n                                overflow: undefined,\n                                onshow: undefined,\n                                onclosing: undefined,\n                                onclose: undefined,\n                                onfocus: undefined,\n                                onmove: undefined,\n                                onmoved: undefined,\n                                onresize: undefined,\n                                onresized: undefined,\n                                onmaximize: undefined,\n                                onmaximized: undefined,\n                                onrestore: undefined,\n                                onrestored: undefined\n                            },\n                            resetHandler: undefined,\n                            beginMoveHandler: undefined,\n                            beginResizeHandler: undefined,\n                            bringToFrontHandler: undefined,\n                            modalClickHandler: undefined,\n                            buttonsClickHandler: undefined,\n                            commandsClickHandler: undefined,\n                            transitionInHandler: undefined,\n                            transitionOutHandler: undefined,\n                            destroy: undefined\n                        };\n\n                        var elements = {};\n                        //root node\n                        elements.root = document.createElement('div');\n\n                        elements.root.className = classes.base + ' ' + classes.hidden + ' ';\n\n                        elements.root.innerHTML = templates.dimmer + templates.modal;\n\n                        //dimmer\n                        elements.dimmer = elements.root.firstChild;\n\n                        //dialog\n                        elements.modal = elements.root.lastChild;\n                        elements.modal.innerHTML = templates.dialog;\n                        elements.dialog = elements.modal.firstChild;\n                        elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;\n\n                        //reset links\n                        elements.reset = [];\n                        elements.reset.push(elements.dialog.firstChild);\n                        elements.reset.push(elements.dialog.lastChild);\n\n                        //commands\n                        elements.commands = {};\n                        elements.commands.container = elements.reset[0].nextSibling;\n                        elements.commands.pin = elements.commands.container.firstChild;\n                        elements.commands.maximize = elements.commands.pin.nextSibling;\n                        elements.commands.close = elements.commands.maximize.nextSibling;\n\n                        //header\n                        elements.header = elements.commands.container.nextSibling;\n\n                        //body\n                        elements.body = elements.header.nextSibling;\n                        elements.body.innerHTML = templates.content;\n                        elements.content = elements.body.firstChild;\n\n                        //footer\n                        elements.footer = elements.body.nextSibling;\n                        elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;\n\n                        //resize handle\n                        elements.resizeHandle = elements.footer.nextSibling;\n\n                        //buttons\n                        elements.buttons = {};\n                        elements.buttons.auxiliary = elements.footer.firstChild;\n                        elements.buttons.primary = elements.buttons.auxiliary.nextSibling;\n                        elements.buttons.primary.innerHTML = templates.button;\n                        elements.buttonTemplate = elements.buttons.primary.firstChild;\n                        //remove button template\n                        elements.buttons.primary.removeChild(elements.buttonTemplate);\n\n                        for (var x = 0; x < instance.__internal.buttons.length; x += 1) {\n                            var button = instance.__internal.buttons[x];\n\n                            // add to the list of used keys.\n                            if (usedKeys.indexOf(button.key) < 0) {\n                                usedKeys.push(button.key);\n                            }\n\n                            button.element = elements.buttonTemplate.cloneNode();\n                            button.element.innerHTML = button.text;\n                            if (typeof button.className === 'string' && button.className !== '') {\n                                addClass(button.element, button.className);\n                            }\n                            for (var key in button.attrs) {\n                                if (key !== 'className' && button.attrs.hasOwnProperty(key)) {\n                                    button.element.setAttribute(key, button.attrs[key]);\n                                }\n                            }\n                            if (button.scope === 'auxiliary') {\n                                elements.buttons.auxiliary.appendChild(button.element);\n                            } else {\n                                elements.buttons.primary.appendChild(button.element);\n                            }\n                        }\n                        //make elements pubic\n                        instance.elements = elements;\n\n                        //save event handlers delegates\n                        internal.resetHandler = delegate(instance, onReset);\n                        internal.beginMoveHandler = delegate(instance, beginMove);\n                        internal.beginResizeHandler = delegate(instance, beginResize);\n                        internal.bringToFrontHandler = delegate(instance, _bringToFront);\n                        internal.modalClickHandler = delegate(instance, modalClickHandler);\n                        internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);\n                        internal.commandsClickHandler = delegate(instance, commandsClickHandler);\n                        internal.transitionInHandler = delegate(instance, handleTransitionInEvent);\n                        internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);\n\n                        //settings\n                        for (var opKey in internal.options) {\n                            if (setup.options[opKey] !== undefined) {\n                                // if found in user options\n                                instance.set(opKey, setup.options[opKey]);\n                            } else if (alertify.defaults.hasOwnProperty(opKey)) {\n                                // else if found in defaults options\n                                instance.set(opKey, alertify.defaults[opKey]);\n                            } else if (opKey === 'title') {\n                                // else if title key, use alertify.defaults.glossary\n                                instance.set(opKey, alertify.defaults.glossary[opKey]);\n                            }\n                        }\n\n                        // allow dom customization\n                        if (typeof instance.build === 'function') {\n                            instance.build();\n                        }\n                    }\n\n                    //add to the end of the DOM tree.\n                    document.body.appendChild(instance.elements.root);\n                }\n\n                /**\r\n                 * Helper: maintains scroll position\r\n                 *\r\n                 */\n                var scrollX, scrollY;\n                function saveScrollPosition() {\n                    scrollX = getScrollLeft();\n                    scrollY = getScrollTop();\n                }\n                function restoreScrollPosition() {\n                    window.scrollTo(scrollX, scrollY);\n                }\n\n                /**\r\n                 * Helper: adds/removes no-overflow class from body\r\n                 *\r\n                 */\n                function ensureNoOverflow() {\n                    var requiresNoOverflow = 0;\n                    for (var x = 0; x < openDialogs.length; x += 1) {\n                        var instance = openDialogs[x];\n                        if (instance.isModal() || instance.isMaximized()) {\n                            requiresNoOverflow += 1;\n                        }\n                    }\n                    if (requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0) {\n                        //last open modal or last maximized one\n                        removeClass(document.body, classes.noOverflow);\n                        preventBodyShift(false);\n                    } else if (requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0) {\n                        //first open modal or first maximized one\n                        preventBodyShift(true);\n                        addClass(document.body, classes.noOverflow);\n                    }\n                }\n                var top = '',\n                    topScroll = 0;\n                /**\r\n                 * Helper: prevents body shift.\r\n                 *\r\n                 */\n                function preventBodyShift(add) {\n                    if (alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                        if (add) {\n                            //&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){\n                            topScroll = scrollY;\n                            top = window.getComputedStyle(document.body).top;\n                            addClass(document.body, classes.fixed);\n                            document.body.style.top = -scrollY + 'px';\n                        } else {\n                            scrollY = topScroll;\n                            document.body.style.top = top;\n                            removeClass(document.body, classes.fixed);\n                            restoreScrollPosition();\n                        }\n                    }\n                }\n\n                /**\r\n                 * Sets the name of the transition used to show/hide the dialog\r\n                 * \r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 */\n                function updateTransition(instance, value, oldValue) {\n                    if (typeof oldValue === 'string') {\n                        removeClass(instance.elements.root, classes.prefix + oldValue);\n                    }\n                    addClass(instance.elements.root, classes.prefix + value);\n                    reflow = instance.elements.root.offsetWidth;\n                }\n\n                /**\r\n                 * Toggles the dialog display mode\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateDisplayMode(instance) {\n                    if (instance.get('modal')) {\n\n                        //make modal\n                        removeClass(instance.elements.root, classes.modeless);\n\n                        //only if open\n                        if (instance.isOpen()) {\n                            unbindModelessEvents(instance);\n\n                            //in case a pinned modless dialog was made modal while open.\n                            updateAbsPositionFix(instance);\n\n                            ensureNoOverflow();\n                        }\n                    } else {\n                        //make modelss\n                        addClass(instance.elements.root, classes.modeless);\n\n                        //only if open\n                        if (instance.isOpen()) {\n                            bindModelessEvents(instance);\n\n                            //in case pin/unpin was called while a modal is open\n                            updateAbsPositionFix(instance);\n\n                            ensureNoOverflow();\n                        }\n                    }\n                }\n\n                /**\r\n                 * Toggles the dialog basic view mode \r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateBasicMode(instance) {\n                    if (instance.get('basic')) {\n                        // add class\n                        addClass(instance.elements.root, classes.basic);\n                    } else {\n                        // remove class\n                        removeClass(instance.elements.root, classes.basic);\n                    }\n                }\n\n                /**\r\n                 * Toggles the dialog frameless view mode \r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateFramelessMode(instance) {\n                    if (instance.get('frameless')) {\n                        // add class\n                        addClass(instance.elements.root, classes.frameless);\n                    } else {\n                        // remove class\n                        removeClass(instance.elements.root, classes.frameless);\n                    }\n                }\n\n                /**\r\n                 * Helper: Brings the modeless dialog to front, attached to modeless dialogs.\r\n                 *\r\n                 * @param {Event} event Focus event\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function _bringToFront(event, instance) {\n\n                    // Do not bring to front if preceeded by an open modal\n                    var index = openDialogs.indexOf(instance);\n                    for (var x = index + 1; x < openDialogs.length; x += 1) {\n                        if (openDialogs[x].isModal()) {\n                            return;\n                        }\n                    }\n\n                    // Bring to front by making it the last child.\n                    if (document.body.lastChild !== instance.elements.root) {\n                        document.body.appendChild(instance.elements.root);\n                        //also make sure its at the end of the list\n                        openDialogs.splice(openDialogs.indexOf(instance), 1);\n                        openDialogs.push(instance);\n                        setFocus(instance);\n                    }\n\n                    return false;\n                }\n\n                /**\r\n                 * Helper: reflects dialogs options updates\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {String} option The updated option name.\r\n                 *\r\n                 * @return\t{undefined}\t\r\n                 */\n                function optionUpdated(instance, option, oldValue, newValue) {\n                    switch (option) {\n                        case 'title':\n                            instance.setHeader(newValue);\n                            break;\n                        case 'modal':\n                            updateDisplayMode(instance);\n                            break;\n                        case 'basic':\n                            updateBasicMode(instance);\n                            break;\n                        case 'frameless':\n                            updateFramelessMode(instance);\n                            break;\n                        case 'pinned':\n                            updatePinned(instance);\n                            break;\n                        case 'closable':\n                            updateClosable(instance);\n                            break;\n                        case 'maximizable':\n                            updateMaximizable(instance);\n                            break;\n                        case 'pinnable':\n                            updatePinnable(instance);\n                            break;\n                        case 'movable':\n                            updateMovable(instance);\n                            break;\n                        case 'resizable':\n                            updateResizable(instance);\n                            break;\n                        case 'transition':\n                            updateTransition(instance, newValue, oldValue);\n                            break;\n                        case 'padding':\n                            if (newValue) {\n                                removeClass(instance.elements.root, classes.noPadding);\n                            } else if (instance.elements.root.className.indexOf(classes.noPadding) < 0) {\n                                addClass(instance.elements.root, classes.noPadding);\n                            }\n                            break;\n                        case 'overflow':\n                            if (newValue) {\n                                removeClass(instance.elements.root, classes.noOverflow);\n                            } else if (instance.elements.root.className.indexOf(classes.noOverflow) < 0) {\n                                addClass(instance.elements.root, classes.noOverflow);\n                            }\n                            break;\n                        case 'transition':\n                            updateTransition(instance, newValue, oldValue);\n                            break;\n                    }\n\n                    // internal on option updated event\n                    if (typeof instance.hooks.onupdate === 'function') {\n                        instance.hooks.onupdate.call(instance, option, oldValue, newValue);\n                    }\n                }\n\n                /**\r\n                 * Helper: reflects dialogs options updates\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Object} obj The object to set/get a value on/from.\r\n                 * @param {Function} callback The callback function to call if the key was found.\r\n                 * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.\r\n                 * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n                 * @param {String} option The updated option name.\r\n                 *\r\n                 * @return\t{Object} result object \r\n                 *\tThe result objects has an 'op' property, indicating of this is a SET or GET operation.\r\n                 *\t\tGET: \r\n                 *\t\t- found: a flag indicating if the key was found or not.\r\n                 *\t\t- value: the property value.\r\n                 *\t\tSET:\r\n                 *\t\t- items: a list of key value pairs of the properties being set.\r\n                 *\t\t\t\teach contains:\r\n                 *\t\t\t\t\t- found: a flag indicating if the key was found or not.\r\n                 *\t\t\t\t\t- key: the property key.\r\n                 *\t\t\t\t\t- value: the property value.\r\n                 */\n                function update(instance, obj, callback, key, value) {\n                    var result = { op: undefined, items: [] };\n                    if (typeof value === 'undefined' && typeof key === 'string') {\n                        //get\n                        result.op = 'get';\n                        if (obj.hasOwnProperty(key)) {\n                            result.found = true;\n                            result.value = obj[key];\n                        } else {\n                            result.found = false;\n                            result.value = undefined;\n                        }\n                    } else {\n                        var old;\n                        //set\n                        result.op = 'set';\n                        if ((typeof key === \"undefined\" ? \"undefined\" : _typeof(key)) === 'object') {\n                            //set multiple\n                            var args = key;\n                            for (var prop in args) {\n                                if (obj.hasOwnProperty(prop)) {\n                                    if (obj[prop] !== args[prop]) {\n                                        old = obj[prop];\n                                        obj[prop] = args[prop];\n                                        callback.call(instance, prop, old, args[prop]);\n                                    }\n                                    result.items.push({ 'key': prop, 'value': args[prop], 'found': true });\n                                } else {\n                                    result.items.push({ 'key': prop, 'value': args[prop], 'found': false });\n                                }\n                            }\n                        } else if (typeof key === 'string') {\n                            //set single\n                            if (obj.hasOwnProperty(key)) {\n                                if (obj[key] !== value) {\n                                    old = obj[key];\n                                    obj[key] = value;\n                                    callback.call(instance, key, old, value);\n                                }\n                                result.items.push({ 'key': key, 'value': value, 'found': true });\n                            } else {\n                                result.items.push({ 'key': key, 'value': value, 'found': false });\n                            }\n                        } else {\n                            //invalid params\n                            throw new Error('args must be a string or object');\n                        }\n                    }\n                    return result;\n                }\n\n                /**\r\n                 * Triggers a close event.\r\n                 *\r\n                 * @param {Object} instance\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function triggerClose(instance) {\n                    var found;\n                    triggerCallback(instance, function (button) {\n                        return found = button.invokeOnClose === true;\n                    });\n                    //none of the buttons registered as onclose callback\n                    //close the dialog\n                    if (!found && instance.isOpen()) {\n                        instance.close();\n                    }\n                }\n\n                /**\r\n                 * Dialogs commands event handler, attached to the dialog commands element.\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Object} instance\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function commandsClickHandler(event, instance) {\n                    var target = event.srcElement || event.target;\n                    switch (target) {\n                        case instance.elements.commands.pin:\n                            if (!instance.isPinned()) {\n                                _pin(instance);\n                            } else {\n                                _unpin(instance);\n                            }\n                            break;\n                        case instance.elements.commands.maximize:\n                            if (!instance.isMaximized()) {\n                                _maximize(instance);\n                            } else {\n                                _restore(instance);\n                            }\n                            break;\n                        case instance.elements.commands.close:\n                            triggerClose(instance);\n                            break;\n                    }\n                    return false;\n                }\n\n                /**\r\n                 * Helper: pins the modeless dialog.\r\n                 *\r\n                 * @param {Object} instance\tThe dialog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function _pin(instance) {\n                    //pin the dialog\n                    instance.set('pinned', true);\n                }\n\n                /**\r\n                 * Helper: unpins the modeless dialog.\r\n                 *\r\n                 * @param {Object} instance\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function _unpin(instance) {\n                    //unpin the dialog \n                    instance.set('pinned', false);\n                }\n\n                /**\r\n                 * Helper: enlarges the dialog to fill the entire screen.\r\n                 *\r\n                 * @param {Object} instance\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function _maximize(instance) {\n                    // allow custom `onmaximize` method\n                    dispatchEvent('onmaximize', instance);\n                    //maximize the dialog \n                    addClass(instance.elements.root, classes.maximized);\n                    if (instance.isOpen()) {\n                        ensureNoOverflow();\n                    }\n                    // allow custom `onmaximized` method\n                    dispatchEvent('onmaximized', instance);\n                }\n\n                /**\r\n                 * Helper: returns the dialog to its former size.\r\n                 *\r\n                 * @param {Object} instance\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function _restore(instance) {\n                    // allow custom `onrestore` method\n                    dispatchEvent('onrestore', instance);\n                    //maximize the dialog \n                    removeClass(instance.elements.root, classes.maximized);\n                    if (instance.isOpen()) {\n                        ensureNoOverflow();\n                    }\n                    // allow custom `onrestored` method\n                    dispatchEvent('onrestored', instance);\n                }\n\n                /**\r\n                 * Show or hide the maximize box.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updatePinnable(instance) {\n                    if (instance.get('pinnable')) {\n                        // add class\n                        addClass(instance.elements.root, classes.pinnable);\n                    } else {\n                        // remove class\n                        removeClass(instance.elements.root, classes.pinnable);\n                    }\n                }\n\n                /**\r\n                 * Helper: Fixes the absolutly positioned modal div position.\r\n                 *\r\n                 * @param {Object} instance The dialog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function addAbsPositionFix(instance) {\n                    var scrollLeft = getScrollLeft();\n                    instance.elements.modal.style.marginTop = getScrollTop() + 'px';\n                    instance.elements.modal.style.marginLeft = scrollLeft + 'px';\n                    instance.elements.modal.style.marginRight = -scrollLeft + 'px';\n                }\n\n                /**\r\n                 * Helper: Removes the absolutly positioned modal div position fix.\r\n                 *\r\n                 * @param {Object} instance The dialog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function removeAbsPositionFix(instance) {\n                    var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);\n                    var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);\n                    instance.elements.modal.style.marginTop = '';\n                    instance.elements.modal.style.marginLeft = '';\n                    instance.elements.modal.style.marginRight = '';\n\n                    if (instance.isOpen()) {\n                        var top = 0,\n                            left = 0;\n                        if (instance.elements.dialog.style.top !== '') {\n                            top = parseInt(instance.elements.dialog.style.top, 10);\n                        }\n                        instance.elements.dialog.style.top = top + (marginTop - getScrollTop()) + 'px';\n\n                        if (instance.elements.dialog.style.left !== '') {\n                            left = parseInt(instance.elements.dialog.style.left, 10);\n                        }\n                        instance.elements.dialog.style.left = left + (marginLeft - getScrollLeft()) + 'px';\n                    }\n                }\n                /**\r\n                 * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.\r\n                 *\r\n                 * @param {Object} instance The dialog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateAbsPositionFix(instance) {\n                    // if modeless and unpinned add fix\n                    if (!instance.get('modal') && !instance.get('pinned')) {\n                        addAbsPositionFix(instance);\n                    } else {\n                        removeAbsPositionFix(instance);\n                    }\n                }\n                /**\r\n                 * Toggles the dialog position lock | modeless only.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to make it modal, false otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updatePinned(instance) {\n                    if (instance.get('pinned')) {\n                        removeClass(instance.elements.root, classes.unpinned);\n                        if (instance.isOpen()) {\n                            removeAbsPositionFix(instance);\n                        }\n                    } else {\n                        addClass(instance.elements.root, classes.unpinned);\n                        if (instance.isOpen() && !instance.isModal()) {\n                            addAbsPositionFix(instance);\n                        }\n                    }\n                }\n\n                /**\r\n                 * Show or hide the maximize box.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateMaximizable(instance) {\n                    if (instance.get('maximizable')) {\n                        // add class\n                        addClass(instance.elements.root, classes.maximizable);\n                    } else {\n                        // remove class\n                        removeClass(instance.elements.root, classes.maximizable);\n                    }\n                }\n\n                /**\r\n                 * Show or hide the close box.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateClosable(instance) {\n                    if (instance.get('closable')) {\n                        // add class\n                        addClass(instance.elements.root, classes.closable);\n                        bindClosableEvents(instance);\n                    } else {\n                        // remove class\n                        removeClass(instance.elements.root, classes.closable);\n                        unbindClosableEvents(instance);\n                    }\n                }\n\n                // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).\n                var cancelClick = false;\n\n                /**\r\n                 * Helper: closes the modal dialog when clicking the modal\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function modalClickHandler(event, instance) {\n                    var target = event.srcElement || event.target;\n                    if (!cancelClick && target === instance.elements.modal && instance.get('closableByDimmer') === true) {\n                        triggerClose(instance);\n                    }\n                    cancelClick = false;\n                    return false;\n                }\n\n                // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).\n                var cancelKeyup = false;\n                /** \r\n                 * Helper: triggers a button callback\r\n                 *\r\n                 * @param {Object}\t\tThe dilog instance.\r\n                 * @param {Function}\tCallback to check which button triggered the event.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function triggerCallback(instance, check) {\n                    for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {\n                        var button = instance.__internal.buttons[idx];\n                        if (!button.element.disabled && check(button)) {\n                            var closeEvent = createCloseEvent(idx, button);\n                            if (typeof instance.callback === 'function') {\n                                instance.callback.apply(instance, [closeEvent]);\n                            }\n                            //close the dialog only if not canceled.\n                            if (closeEvent.cancel === false) {\n                                instance.close();\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                /**\r\n                 * Clicks event handler, attached to the dialog footer.\r\n                 *\r\n                 * @param {Event}\t\tDOM event object.\r\n                 * @param {Object}\t\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function buttonsClickHandler(event, instance) {\n                    var target = event.srcElement || event.target;\n                    triggerCallback(instance, function (button) {\n                        // if this button caused the click, cancel keyup event\n                        return button.element === target && (cancelKeyup = true);\n                    });\n                }\n\n                /**\r\n                 * Keyup event handler, attached to the document.body\r\n                 *\r\n                 * @param {Event}\t\tDOM event object.\r\n                 * @param {Object}\t\tThe dilog instance.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function keyupHandler(event) {\n                    //hitting enter while button has focus will trigger keyup too.\n                    //ignore if handled by clickHandler\n                    if (cancelKeyup) {\n                        cancelKeyup = false;\n                        return;\n                    }\n                    var instance = openDialogs[openDialogs.length - 1];\n                    var keyCode = event.keyCode;\n                    if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {\n                        triggerClose(instance);\n                        return false;\n                    } else if (usedKeys.indexOf(keyCode) > -1) {\n                        triggerCallback(instance, function (button) {\n                            return button.key === keyCode;\n                        });\n                        return false;\n                    }\n                }\n                /**\r\n                * Keydown event handler, attached to the document.body\r\n                *\r\n                * @param {Event}\t\tDOM event object.\r\n                * @param {Object}\t\tThe dilog instance.\r\n                * \r\n                * @return {undefined}\r\n                */\n                function keydownHandler(event) {\n                    var instance = openDialogs[openDialogs.length - 1];\n                    var keyCode = event.keyCode;\n                    if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {\n                        var buttons = instance.__internal.buttons;\n                        for (var x = 0; x < buttons.length; x += 1) {\n                            if (document.activeElement === buttons[x].element) {\n                                switch (keyCode) {\n                                    case keys.LEFT:\n                                        buttons[(x || buttons.length) - 1].element.focus();\n                                        return;\n                                    case keys.RIGHT:\n                                        buttons[(x + 1) % buttons.length].element.focus();\n                                        return;\n                                }\n                            }\n                        }\n                    } else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        triggerCallback(instance, function (button) {\n                            return button.key === keyCode;\n                        });\n                        return false;\n                    }\n                }\n\n                /**\r\n                 * Sets focus to proper dialog element\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Node} [resetTarget=undefined] DOM element to reset focus to.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function setFocus(instance, resetTarget) {\n                    // reset target has already been determined.\n                    if (resetTarget) {\n                        resetTarget.focus();\n                    } else {\n                        // current instance focus settings\n                        var focus = instance.__internal.focus;\n                        // the focus element.\n                        var element = focus.element;\n\n                        switch (_typeof(focus.element)) {\n                            // a number means a button index\n                            case 'number':\n                                if (instance.__internal.buttons.length > focus.element) {\n                                    //in basic view, skip focusing the buttons.\n                                    if (instance.get('basic') === true) {\n                                        element = instance.elements.reset[0];\n                                    } else {\n                                        element = instance.__internal.buttons[focus.element].element;\n                                    }\n                                }\n                                break;\n                            // a string means querySelector to select from dialog body contents.\n                            case 'string':\n                                element = instance.elements.body.querySelector(focus.element);\n                                break;\n                            // a function should return the focus element.\n                            case 'function':\n                                element = focus.element.call(instance);\n                                break;\n                        }\n\n                        // if no focus element, default to first reset element.\n                        if ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {\n                            element = instance.elements.reset[0];\n                        }\n                        // focus\n                        if (element && element.focus) {\n                            element.focus();\n                            // if selectable\n                            if (focus.select && element.select) {\n                                element.select();\n                            }\n                        }\n                    }\n                }\n\n                /**\r\n                 * Focus event handler, attached to document.body and dialogs own reset links.\r\n                 * handles the focus for modal dialogs only.\r\n                 *\r\n                 * @param {Event} event DOM focus event object.\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function onReset(event, instance) {\n\n                    // should work on last modal if triggered from document.body \n                    if (!instance) {\n                        for (var x = openDialogs.length - 1; x > -1; x -= 1) {\n                            if (openDialogs[x].isModal()) {\n                                instance = openDialogs[x];\n                                break;\n                            }\n                        }\n                    }\n                    // if modal\n                    if (instance && instance.isModal()) {\n                        // determine reset target to enable forward/backward tab cycle.\n                        var resetTarget,\n                            target = event.srcElement || event.target;\n                        var lastResetElement = target === instance.elements.reset[1] || instance.__internal.buttons.length === 0 && target === document.body;\n\n                        // if last reset link, then go to maximize or close\n                        if (lastResetElement) {\n                            if (instance.get('maximizable')) {\n                                resetTarget = instance.elements.commands.maximize;\n                            } else if (instance.get('closable')) {\n                                resetTarget = instance.elements.commands.close;\n                            }\n                        }\n                        // if no reset target found, try finding the best button\n                        if (resetTarget === undefined) {\n                            if (typeof instance.__internal.focus.element === 'number') {\n                                // button focus element, go to first available button\n                                if (target === instance.elements.reset[0]) {\n                                    resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;\n                                } else if (lastResetElement) {\n                                    //restart the cycle by going to first reset link\n                                    resetTarget = instance.elements.reset[0];\n                                }\n                            } else {\n                                // will reach here when tapping backwards, so go to last child\n                                // The focus element SHOULD NOT be a button (logically!).\n                                if (target === instance.elements.reset[0]) {\n                                    resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;\n                                }\n                            }\n                        }\n                        // focus\n                        setFocus(instance, resetTarget);\n                    }\n                }\n                /**\r\n                 * Transition in transitionend event handler. \r\n                 *\r\n                 * @param {Event}\t\tTransitionEnd event object.\r\n                 * @param {Object}\t\tThe dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function handleTransitionInEvent(event, instance) {\n                    // clear the timer\n                    clearTimeout(instance.__internal.timerIn);\n\n                    // once transition is complete, set focus\n                    setFocus(instance);\n\n                    //restore scroll to prevent document jump\n                    restoreScrollPosition();\n\n                    // allow handling key up after transition ended.\n                    cancelKeyup = false;\n\n                    // allow custom `onfocus` method\n                    dispatchEvent('onfocus', instance);\n\n                    // unbind the event\n                    off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n\n                    removeClass(instance.elements.root, classes.animationIn);\n                }\n\n                /**\r\n                 * Transition out transitionend event handler. \r\n                 *\r\n                 * @param {Event}\t\tTransitionEnd event object.\r\n                 * @param {Object}\t\tThe dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function handleTransitionOutEvent(event, instance) {\n                    // clear the timer\n                    clearTimeout(instance.__internal.timerOut);\n                    // unbind the event\n                    off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n                    // reset move updates\n                    resetMove(instance);\n                    // reset resize updates\n                    resetResize(instance);\n\n                    // restore if maximized\n                    if (instance.isMaximized() && !instance.get('startMaximized')) {\n                        _restore(instance);\n                    }\n\n                    // return focus to the last active element\n                    if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {\n                        instance.__internal.activeElement.focus();\n                        instance.__internal.activeElement = null;\n                    }\n\n                    //destory the instance\n                    if (typeof instance.__internal.destroy === 'function') {\n                        instance.__internal.destroy.apply(instance);\n                    }\n                }\n                /* Controls moving a dialog around */\n                //holde the current moving instance\n                var movable = null,\n\n                //holds the current X offset when move starts\n                offsetX = 0,\n\n                //holds the current Y offset when move starts\n                offsetY = 0,\n                    xProp = 'pageX',\n                    yProp = 'pageY',\n                    bounds = null,\n                    refreshTop = false,\n                    moveDelegate = null;\n\n                /**\r\n                 * Helper: sets the element top/left coordinates\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Node} element The element being moved.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function moveElement(event, element) {\n                    var left = event[xProp] - offsetX,\n                        top = event[yProp] - offsetY;\n\n                    if (refreshTop) {\n                        top -= document.body.scrollTop;\n                    }\n\n                    element.style.left = left + 'px';\n                    element.style.top = top + 'px';\n                }\n                /**\r\n                 * Helper: sets the element top/left coordinates within screen bounds\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Node} element The element being moved.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function moveElementBounded(event, element) {\n                    var left = event[xProp] - offsetX,\n                        top = event[yProp] - offsetY;\n\n                    if (refreshTop) {\n                        top -= document.body.scrollTop;\n                    }\n\n                    element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';\n                    if (refreshTop) {\n                        element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';\n                    } else {\n                        element.style.top = Math.max(bounds.minTop, top) + 'px';\n                    }\n                }\n\n                /**\r\n                 * Triggers the start of a move event, attached to the header element mouse down event.\r\n                 * Adds no-selection class to the body, disabling selection while moving.\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Object} instance The dilog instance.\r\n                 * \r\n                 * @return {Boolean} false\r\n                 */\n                function beginMove(event, instance) {\n                    if (resizable === null && !instance.isMaximized() && instance.get('movable')) {\n                        var eventSrc,\n                            left = 0,\n                            top = 0;\n                        if (event.type === 'touchstart') {\n                            event.preventDefault();\n                            eventSrc = event.targetTouches[0];\n                            xProp = 'clientX';\n                            yProp = 'clientY';\n                        } else if (event.button === 0) {\n                            eventSrc = event;\n                        }\n\n                        if (eventSrc) {\n\n                            var element = instance.elements.dialog;\n                            addClass(element, classes.capture);\n\n                            if (element.style.left) {\n                                left = parseInt(element.style.left, 10);\n                            }\n\n                            if (element.style.top) {\n                                top = parseInt(element.style.top, 10);\n                            }\n\n                            offsetX = eventSrc[xProp] - left;\n                            offsetY = eventSrc[yProp] - top;\n\n                            if (instance.isModal()) {\n                                offsetY += instance.elements.modal.scrollTop;\n                            } else if (instance.isPinned()) {\n                                offsetY -= document.body.scrollTop;\n                            }\n\n                            if (instance.get('moveBounded')) {\n                                var current = element,\n                                    offsetLeft = -left,\n                                    offsetTop = -top;\n\n                                //calc offset\n                                do {\n                                    offsetLeft += current.offsetLeft;\n                                    offsetTop += current.offsetTop;\n                                } while (current = current.offsetParent);\n\n                                bounds = {\n                                    maxLeft: offsetLeft,\n                                    minLeft: -offsetLeft,\n                                    maxTop: document.documentElement.clientHeight - element.clientHeight - offsetTop,\n                                    minTop: -offsetTop\n                                };\n                                moveDelegate = moveElementBounded;\n                            } else {\n                                bounds = null;\n                                moveDelegate = moveElement;\n                            }\n\n                            // allow custom `onmove` method\n                            dispatchEvent('onmove', instance);\n\n                            refreshTop = !instance.isModal() && instance.isPinned();\n                            movable = instance;\n                            moveDelegate(eventSrc, element);\n                            addClass(document.body, classes.noSelection);\n                            return false;\n                        }\n                    }\n                }\n\n                /**\r\n                 * The actual move handler,  attached to document.body mousemove event.\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function move(event) {\n                    if (movable) {\n                        var eventSrc;\n                        if (event.type === 'touchmove') {\n                            event.preventDefault();\n                            eventSrc = event.targetTouches[0];\n                        } else if (event.button === 0) {\n                            eventSrc = event;\n                        }\n                        if (eventSrc) {\n                            moveDelegate(eventSrc, movable.elements.dialog);\n                        }\n                    }\n                }\n\n                /**\r\n                 * Triggers the end of a move event,  attached to document.body mouseup event.\r\n                 * Removes no-selection class from document.body, allowing selection.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function endMove() {\n                    if (movable) {\n                        var instance = movable;\n                        movable = bounds = null;\n                        removeClass(document.body, classes.noSelection);\n                        removeClass(instance.elements.dialog, classes.capture);\n                        // allow custom `onmoved` method\n                        dispatchEvent('onmoved', instance);\n                    }\n                }\n\n                /**\r\n                 * Resets any changes made by moving the element to its original state,\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function resetMove(instance) {\n                    movable = null;\n                    var element = instance.elements.dialog;\n                    element.style.left = element.style.top = '';\n                }\n\n                /**\r\n                 * Updates the dialog move behavior.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateMovable(instance) {\n                    if (instance.get('movable')) {\n                        // add class\n                        addClass(instance.elements.root, classes.movable);\n                        if (instance.isOpen()) {\n                            bindMovableEvents(instance);\n                        }\n                    } else {\n\n                        //reset\n                        resetMove(instance);\n                        // remove class\n                        removeClass(instance.elements.root, classes.movable);\n                        if (instance.isOpen()) {\n                            unbindMovableEvents(instance);\n                        }\n                    }\n                }\n\n                /* Controls moving a dialog around */\n                //holde the current instance being resized\t\t\n                var resizable = null,\n\n                //holds the staring left offset when resize starts.\n                startingLeft = Number.Nan,\n\n                //holds the staring width when resize starts.\n                startingWidth = 0,\n\n                //holds the initial width when resized for the first time.\n                minWidth = 0,\n\n                //holds the offset of the resize handle.\n                handleOffset = 0;\n\n                /**\r\n                 * Helper: sets the element width/height and updates left coordinate if neccessary.\r\n                 *\r\n                 * @param {Event} event\tDOM mousemove event object.\r\n                 * @param {Node} element The element being moved.\r\n                 * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function resizeElement(event, element, pageRelative) {\n\n                    //calculate offsets from 0,0\n                    var current = element;\n                    var offsetLeft = 0;\n                    var offsetTop = 0;\n                    do {\n                        offsetLeft += current.offsetLeft;\n                        offsetTop += current.offsetTop;\n                    } while (current = current.offsetParent);\n\n                    // determine X,Y coordinates.\n                    var X, Y;\n                    if (pageRelative === true) {\n                        X = event.pageX;\n                        Y = event.pageY;\n                    } else {\n                        X = event.clientX;\n                        Y = event.clientY;\n                    }\n                    // rtl handling\n                    var isRTL = isRightToLeft();\n                    if (isRTL) {\n                        // reverse X \n                        X = document.body.offsetWidth - X;\n                        // if has a starting left, calculate offsetRight\n                        if (!isNaN(startingLeft)) {\n                            offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;\n                        }\n                    }\n\n                    // set width/height\n                    element.style.height = Y - offsetTop + handleOffset + 'px';\n                    element.style.width = X - offsetLeft + handleOffset + 'px';\n\n                    // if the element being resized has a starting left, maintain it.\n                    // the dialog is centered, divide by half the offset to maintain the margins.\n                    if (!isNaN(startingLeft)) {\n                        var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;\n                        if (isRTL) {\n                            //negate the diff, why?\n                            //when growing it should decrease left\n                            //when shrinking it should increase left\n                            diff *= -1;\n                        }\n                        if (element.offsetWidth > startingWidth) {\n                            //growing\n                            element.style.left = startingLeft + diff + 'px';\n                        } else if (element.offsetWidth >= minWidth) {\n                            //shrinking\n                            element.style.left = startingLeft - diff + 'px';\n                        }\n                    }\n                }\n\n                /**\r\n                 * Triggers the start of a resize event, attached to the resize handle element mouse down event.\r\n                 * Adds no-selection class to the body, disabling selection while moving.\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * @param {Object} instance The dilog instance.\r\n                 * \r\n                 * @return {Boolean} false\r\n                 */\n                function beginResize(event, instance) {\n                    if (!instance.isMaximized()) {\n                        var eventSrc;\n                        if (event.type === 'touchstart') {\n                            event.preventDefault();\n                            eventSrc = event.targetTouches[0];\n                        } else if (event.button === 0) {\n                            eventSrc = event;\n                        }\n                        if (eventSrc) {\n                            // allow custom `onresize` method\n                            dispatchEvent('onresize', instance);\n\n                            resizable = instance;\n                            handleOffset = instance.elements.resizeHandle.offsetHeight / 2;\n                            var element = instance.elements.dialog;\n                            addClass(element, classes.capture);\n                            startingLeft = parseInt(element.style.left, 10);\n                            element.style.height = element.offsetHeight + 'px';\n                            element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';\n                            element.style.width = (startingWidth = element.offsetWidth) + 'px';\n\n                            if (element.style.maxWidth !== 'none') {\n                                element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n                            }\n                            element.style.maxWidth = 'none';\n                            addClass(document.body, classes.noSelection);\n                            return false;\n                        }\n                    }\n                }\n\n                /**\r\n                 * The actual resize handler,  attached to document.body mousemove event.\r\n                 *\r\n                 * @param {Event} event\tDOM event object.\r\n                 * \r\n                 * @return {undefined}\r\n                 */\n                function resize(event) {\n                    if (resizable) {\n                        var eventSrc;\n                        if (event.type === 'touchmove') {\n                            event.preventDefault();\n                            eventSrc = event.targetTouches[0];\n                        } else if (event.button === 0) {\n                            eventSrc = event;\n                        }\n                        if (eventSrc) {\n                            resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));\n                        }\n                    }\n                }\n\n                /**\r\n                 * Triggers the end of a resize event,  attached to document.body mouseup event.\r\n                 * Removes no-selection class from document.body, allowing selection.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function endResize() {\n                    if (resizable) {\n                        var instance = resizable;\n                        resizable = null;\n                        removeClass(document.body, classes.noSelection);\n                        removeClass(instance.elements.dialog, classes.capture);\n                        cancelClick = true;\n                        // allow custom `onresized` method\n                        dispatchEvent('onresized', instance);\n                    }\n                }\n\n                /**\r\n                 * Resets any changes made by resizing the element to its original state.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function resetResize(instance) {\n                    resizable = null;\n                    var element = instance.elements.dialog;\n                    if (element.style.maxWidth === 'none') {\n                        //clear inline styles.\n                        element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';\n                        //reset variables.\n                        startingLeft = Number.Nan;\n                        startingWidth = minWidth = handleOffset = 0;\n                    }\n                }\n\n                /**\r\n                 * Updates the dialog move behavior.\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 * @param {Boolean} on True to add the behavior, removes it otherwise.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function updateResizable(instance) {\n                    if (instance.get('resizable')) {\n                        // add class\n                        addClass(instance.elements.root, classes.resizable);\n                        if (instance.isOpen()) {\n                            bindResizableEvents(instance);\n                        }\n                    } else {\n                        //reset\n                        resetResize(instance);\n                        // remove class\n                        removeClass(instance.elements.root, classes.resizable);\n                        if (instance.isOpen()) {\n                            unbindResizableEvents(instance);\n                        }\n                    }\n                }\n\n                /**\r\n                 * Reset move/resize on window resize.\r\n                 *\r\n                 * @param {Event} event\twindow resize event object.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function windowResize() /*event*/{\n                    for (var x = 0; x < openDialogs.length; x += 1) {\n                        var instance = openDialogs[x];\n                        if (instance.get('autoReset')) {\n                            resetMove(instance);\n                            resetResize(instance);\n                        }\n                    }\n                }\n                /**\r\n                 * Bind dialogs events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function bindEvents(instance) {\n                    // if first dialog, hook global handlers\n                    if (openDialogs.length === 1) {\n                        //global\n                        on(window, 'resize', windowResize);\n                        on(document.body, 'keyup', keyupHandler);\n                        on(document.body, 'keydown', keydownHandler);\n                        on(document.body, 'focus', onReset);\n\n                        //move\n                        on(document.documentElement, 'mousemove', move);\n                        on(document.documentElement, 'touchmove', move);\n                        on(document.documentElement, 'mouseup', endMove);\n                        on(document.documentElement, 'touchend', endMove);\n                        //resize\n                        on(document.documentElement, 'mousemove', resize);\n                        on(document.documentElement, 'touchmove', resize);\n                        on(document.documentElement, 'mouseup', endResize);\n                        on(document.documentElement, 'touchend', endResize);\n                    }\n\n                    // common events\n                    on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n                    on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n                    on(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);\n                    on(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);\n\n                    //prevent handling key up when dialog is being opened by a key stroke.\n                    cancelKeyup = true;\n                    // hook in transition handler\n                    on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);\n\n                    // modelss only events\n                    if (!instance.get('modal')) {\n                        bindModelessEvents(instance);\n                    }\n\n                    // resizable\n                    if (instance.get('resizable')) {\n                        bindResizableEvents(instance);\n                    }\n\n                    // movable\n                    if (instance.get('movable')) {\n                        bindMovableEvents(instance);\n                    }\n                }\n\n                /**\r\n                 * Unbind dialogs events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function unbindEvents(instance) {\n                    // if last dialog, remove global handlers\n                    if (openDialogs.length === 1) {\n                        //global\n                        off(window, 'resize', windowResize);\n                        off(document.body, 'keyup', keyupHandler);\n                        off(document.body, 'keydown', keydownHandler);\n                        off(document.body, 'focus', onReset);\n                        //move\n                        off(document.documentElement, 'mousemove', move);\n                        off(document.documentElement, 'mouseup', endMove);\n                        //resize\n                        off(document.documentElement, 'mousemove', resize);\n                        off(document.documentElement, 'mouseup', endResize);\n                    }\n\n                    // common events\n                    off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);\n                    off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);\n                    off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);\n                    off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);\n\n                    // hook out transition handler\n                    on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);\n\n                    // modelss only events\n                    if (!instance.get('modal')) {\n                        unbindModelessEvents(instance);\n                    }\n\n                    // movable\n                    if (instance.get('movable')) {\n                        unbindMovableEvents(instance);\n                    }\n\n                    // resizable\n                    if (instance.get('resizable')) {\n                        unbindResizableEvents(instance);\n                    }\n                }\n\n                /**\r\n                 * Bind modeless specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function bindModelessEvents(instance) {\n                    on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n                }\n\n                /**\r\n                 * Unbind modeless specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function unbindModelessEvents(instance) {\n                    off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);\n                }\n\n                /**\r\n                 * Bind movable specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function bindMovableEvents(instance) {\n                    on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n                    on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\n                }\n\n                /**\r\n                 * Unbind movable specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function unbindMovableEvents(instance) {\n                    off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);\n                    off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);\n                }\n\n                /**\r\n                 * Bind resizable specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function bindResizableEvents(instance) {\n                    on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n                    on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\n                }\n\n                /**\r\n                 * Unbind resizable specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function unbindResizableEvents(instance) {\n                    off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);\n                    off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);\n                }\n\n                /**\r\n                 * Bind closable events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function bindClosableEvents(instance) {\n                    on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n                }\n\n                /**\r\n                 * Unbind closable specific events\r\n                 *\r\n                 * @param {Object} instance The dilog instance.\r\n                 *\r\n                 * @return {undefined}\r\n                 */\n                function unbindClosableEvents(instance) {\n                    off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);\n                }\n                // dialog API\n                return {\n                    __init: initialize,\n                    /**\r\n                     * Check if dialog is currently open\r\n                     *\r\n                     * @return {Boolean}\r\n                     */\n                    isOpen: function isOpen() {\n                        return this.__internal.isOpen;\n                    },\n                    isModal: function isModal() {\n                        return this.elements.root.className.indexOf(classes.modeless) < 0;\n                    },\n                    isMaximized: function isMaximized() {\n                        return this.elements.root.className.indexOf(classes.maximized) > -1;\n                    },\n                    isPinned: function isPinned() {\n                        return this.elements.root.className.indexOf(classes.unpinned) < 0;\n                    },\n                    maximize: function maximize() {\n                        if (!this.isMaximized()) {\n                            _maximize(this);\n                        }\n                        return this;\n                    },\n                    restore: function restore() {\n                        if (this.isMaximized()) {\n                            _restore(this);\n                        }\n                        return this;\n                    },\n                    pin: function pin() {\n                        if (!this.isPinned()) {\n                            _pin(this);\n                        }\n                        return this;\n                    },\n                    unpin: function unpin() {\n                        if (this.isPinned()) {\n                            _unpin(this);\n                        }\n                        return this;\n                    },\n                    bringToFront: function bringToFront() {\n                        _bringToFront(null, this);\n                        return this;\n                    },\n                    /**\r\n                     * Move the dialog to a specific x/y coordinates\r\n                     *\r\n                     * @param {Number} x    The new dialog x coordinate in pixels.\r\n                     * @param {Number} y    The new dialog y coordinate in pixels.\r\n                     *\r\n                     * @return {Object} The dialog instance.\r\n                     */\n                    moveTo: function moveTo(x, y) {\n                        if (!isNaN(x) && !isNaN(y)) {\n                            // allow custom `onmove` method\n                            dispatchEvent('onmove', this);\n\n                            var element = this.elements.dialog,\n                                current = element,\n                                offsetLeft = 0,\n                                offsetTop = 0;\n\n                            //subtract existing left,top\n                            if (element.style.left) {\n                                offsetLeft -= parseInt(element.style.left, 10);\n                            }\n                            if (element.style.top) {\n                                offsetTop -= parseInt(element.style.top, 10);\n                            }\n                            //calc offset\n                            do {\n                                offsetLeft += current.offsetLeft;\n                                offsetTop += current.offsetTop;\n                            } while (current = current.offsetParent);\n\n                            //calc left, top\n                            var left = x - offsetLeft;\n                            var top = y - offsetTop;\n\n                            //// rtl handling\n                            if (isRightToLeft()) {\n                                left *= -1;\n                            }\n\n                            element.style.left = left + 'px';\n                            element.style.top = top + 'px';\n\n                            // allow custom `onmoved` method\n                            dispatchEvent('onmoved', this);\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * Resize the dialog to a specific width/height (the dialog must be 'resizable').\r\n                     * The dialog can be resized to:\r\n                     *  A minimum width equal to the initial display width\r\n                     *  A minimum height equal to the sum of header/footer heights.\r\n                     *\r\n                     *\r\n                     * @param {Number or String} width    The new dialog width in pixels or in percent.\r\n                     * @param {Number or String} height   The new dialog height in pixels or in percent.\r\n                     *\r\n                     * @return {Object} The dialog instance.\r\n                     */\n                    resizeTo: function resizeTo(width, height) {\n                        var w = parseFloat(width),\n                            h = parseFloat(height),\n                            regex = /(\\d*\\.\\d+|\\d+)%/;\n\n                        if (!isNaN(w) && !isNaN(h) && this.get('resizable') === true) {\n\n                            // allow custom `onresize` method\n                            dispatchEvent('onresize', this);\n\n                            if (('' + width).match(regex)) {\n                                w = w / 100 * document.documentElement.clientWidth;\n                            }\n\n                            if (('' + height).match(regex)) {\n                                h = h / 100 * document.documentElement.clientHeight;\n                            }\n\n                            var element = this.elements.dialog;\n                            if (element.style.maxWidth !== 'none') {\n                                element.style.minWidth = (minWidth = element.offsetWidth) + 'px';\n                            }\n                            element.style.maxWidth = 'none';\n                            element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';\n                            element.style.width = w + 'px';\n                            element.style.height = h + 'px';\n\n                            // allow custom `onresized` method\n                            dispatchEvent('onresized', this);\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * Gets or Sets dialog settings/options \r\n                     *\r\n                     * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n                     * @param {Object} value Optional, the value associated with the key (in case it was a string).\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    setting: function setting(key, value) {\n                        var self = this;\n                        var result = update(this, this.__internal.options, function (k, o, n) {\n                            optionUpdated(self, k, o, n);\n                        }, key, value);\n                        if (result.op === 'get') {\n                            if (result.found) {\n                                return result.value;\n                            } else if (typeof this.settings !== 'undefined') {\n                                return update(this, this.settings, this.settingUpdated || function () {}, key, value).value;\n                            } else {\n                                return undefined;\n                            }\n                        } else if (result.op === 'set') {\n                            if (result.items.length > 0) {\n                                var callback = this.settingUpdated || function () {};\n                                for (var x = 0; x < result.items.length; x += 1) {\n                                    var item = result.items[x];\n                                    if (!item.found && typeof this.settings !== 'undefined') {\n                                        update(this, this.settings, callback, item.key, item.value);\n                                    }\n                                }\n                            }\n                            return this;\n                        }\n                    },\n                    /**\r\n                     * [Alias] Sets dialog settings/options \r\n                     */\n                    set: function set(key, value) {\n                        this.setting(key, value);\n                        return this;\n                    },\n                    /**\r\n                     * [Alias] Gets dialog settings/options \r\n                     */\n                    get: function get(key) {\n                        return this.setting(key);\n                    },\n                    /**\r\n                    * Sets dialog header\r\n                    * @content {string or element}\r\n                    *\r\n                    * @return {undefined}\r\n                    */\n                    setHeader: function setHeader(content) {\n                        if (typeof content === 'string') {\n                            clearContents(this.elements.header);\n                            this.elements.header.innerHTML = content;\n                        } else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content) {\n                            clearContents(this.elements.header);\n                            this.elements.header.appendChild(content);\n                        }\n                        return this;\n                    },\n                    /**\r\n                    * Sets dialog contents\r\n                    * @content {string or element}\r\n                    *\r\n                    * @return {undefined}\r\n                    */\n                    setContent: function setContent(content) {\n                        if (typeof content === 'string') {\n                            clearContents(this.elements.content);\n                            this.elements.content.innerHTML = content;\n                        } else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content) {\n                            clearContents(this.elements.content);\n                            this.elements.content.appendChild(content);\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * Show the dialog as modal\r\n                     *\r\n                     * @return {Object} the dialog instance.\r\n                     */\n                    showModal: function showModal(className) {\n                        return this.show(true, className);\n                    },\n                    /**\r\n                     * Show the dialog\r\n                     *\r\n                     * @return {Object} the dialog instance.\r\n                     */\n                    show: function show(modal, className) {\n\n                        // ensure initialization\n                        initialize(this);\n\n                        if (!this.__internal.isOpen) {\n\n                            // add to open dialogs\n                            this.__internal.isOpen = true;\n                            openDialogs.push(this);\n\n                            // save last focused element\n                            if (alertify.defaults.maintainFocus) {\n                                this.__internal.activeElement = document.activeElement;\n                            }\n\n                            //allow custom dom manipulation updates before showing the dialog.\n                            if (typeof this.prepare === 'function') {\n                                this.prepare();\n                            }\n\n                            bindEvents(this);\n\n                            if (modal !== undefined) {\n                                this.set('modal', modal);\n                            }\n\n                            //save scroll to prevent document jump\n                            saveScrollPosition();\n\n                            ensureNoOverflow();\n\n                            // allow custom dialog class on show\n                            if (typeof className === 'string' && className !== '') {\n                                this.__internal.className = className;\n                                addClass(this.elements.root, className);\n                            }\n\n                            // maximize if start maximized\n                            if (this.get('startMaximized')) {\n                                this.maximize();\n                            } else if (this.isMaximized()) {\n                                _restore(this);\n                            }\n\n                            updateAbsPositionFix(this);\n\n                            removeClass(this.elements.root, classes.animationOut);\n                            addClass(this.elements.root, classes.animationIn);\n\n                            // set 1s fallback in case transition event doesn't fire\n                            clearTimeout(this.__internal.timerIn);\n                            this.__internal.timerIn = setTimeout(this.__internal.transitionInHandler, transition.supported ? 1000 : 100);\n\n                            if (isSafari) {\n                                // force desktop safari reflow\n                                var root = this.elements.root;\n                                root.style.display = 'none';\n                                setTimeout(function () {\n                                    root.style.display = 'block';\n                                }, 0);\n                            }\n\n                            //reflow\n                            reflow = this.elements.root.offsetWidth;\n\n                            // show dialog\n                            removeClass(this.elements.root, classes.hidden);\n\n                            // internal on show event\n                            if (typeof this.hooks.onshow === 'function') {\n                                this.hooks.onshow.call(this);\n                            }\n\n                            // allow custom `onshow` method\n                            dispatchEvent('onshow', this);\n                        } else {\n                            // reset move updates\n                            resetMove(this);\n                            // reset resize updates\n                            resetResize(this);\n                            // shake the dialog to indicate its already open\n                            addClass(this.elements.dialog, classes.shake);\n                            var self = this;\n                            setTimeout(function () {\n                                removeClass(self.elements.dialog, classes.shake);\n                            }, 200);\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * Close the dialog\r\n                     *\r\n                     * @return {Object} The dialog instance\r\n                     */\n                    close: function close() {\n                        if (this.__internal.isOpen) {\n                            // custom `onclosing` event\n                            if (dispatchEvent('onclosing', this) !== false) {\n\n                                unbindEvents(this);\n\n                                removeClass(this.elements.root, classes.animationIn);\n                                addClass(this.elements.root, classes.animationOut);\n\n                                // set 1s fallback in case transition event doesn't fire\n                                clearTimeout(this.__internal.timerOut);\n                                this.__internal.timerOut = setTimeout(this.__internal.transitionOutHandler, transition.supported ? 1000 : 100);\n                                // hide dialog\n                                addClass(this.elements.root, classes.hidden);\n                                //reflow\n                                reflow = this.elements.modal.offsetWidth;\n\n                                // remove custom dialog class on hide\n                                if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {\n                                    removeClass(this.elements.root, this.__internal.className);\n                                }\n\n                                // internal on close event\n                                if (typeof this.hooks.onclose === 'function') {\n                                    this.hooks.onclose.call(this);\n                                }\n\n                                // allow custom `onclose` method\n                                dispatchEvent('onclose', this);\n\n                                //remove from open dialogs\n                                openDialogs.splice(openDialogs.indexOf(this), 1);\n                                this.__internal.isOpen = false;\n\n                                ensureNoOverflow();\n                            }\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * Close all open dialogs except this.\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    closeOthers: function closeOthers() {\n                        alertify.closeAll(this);\n                        return this;\n                    },\n                    /**\r\n                     * Destroys this dialog instance\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    destroy: function destroy() {\n                        if (this.__internal.isOpen) {\n                            //mark dialog for destruction, this will be called on tranistionOut event.\n                            this.__internal.destroy = function () {\n                                destruct(this, initialize);\n                            };\n                            //close the dialog to unbind all events.\n                            this.close();\n                        } else {\n                            destruct(this, initialize);\n                        }\n                        return this;\n                    }\n                };\n            }();\n            var notifier = function () {\n                var reflow,\n                    element,\n                    openInstances = [],\n                    classes = {\n                    base: 'alertify-notifier',\n                    message: 'ajs-message',\n                    top: 'ajs-top',\n                    right: 'ajs-right',\n                    bottom: 'ajs-bottom',\n                    left: 'ajs-left',\n                    center: 'ajs-center',\n                    visible: 'ajs-visible',\n                    hidden: 'ajs-hidden',\n                    close: 'ajs-close'\n                };\n                /**\r\n                 * Helper: initializes the notifier instance\r\n                 *\r\n                 */\n                function initialize(instance) {\n\n                    if (!instance.__internal) {\n                        instance.__internal = {\n                            position: alertify.defaults.notifier.position,\n                            delay: alertify.defaults.notifier.delay\n                        };\n\n                        element = document.createElement('DIV');\n\n                        updatePosition(instance);\n                    }\n\n                    //add to DOM tree.\n                    if (element.parentNode !== document.body) {\n                        document.body.appendChild(element);\n                    }\n                }\n\n                function pushInstance(instance) {\n                    instance.__internal.pushed = true;\n                    openInstances.push(instance);\n                }\n                function popInstance(instance) {\n                    openInstances.splice(openInstances.indexOf(instance), 1);\n                    instance.__internal.pushed = false;\n                }\n                /**\r\n                 * Helper: update the notifier instance position\r\n                 *\r\n                 */\n                function updatePosition(instance) {\n                    element.className = classes.base;\n                    switch (instance.__internal.position) {\n                        case 'top-right':\n                            addClass(element, classes.top + ' ' + classes.right);\n                            break;\n                        case 'top-left':\n                            addClass(element, classes.top + ' ' + classes.left);\n                            break;\n                        case 'top-center':\n                            addClass(element, classes.top + ' ' + classes.center);\n                            break;\n                        case 'bottom-left':\n                            addClass(element, classes.bottom + ' ' + classes.left);\n                            break;\n                        case 'bottom-center':\n                            addClass(element, classes.bottom + ' ' + classes.center);\n                            break;\n\n                        default:\n                        case 'bottom-right':\n                            addClass(element, classes.bottom + ' ' + classes.right);\n                            break;\n                    }\n                }\n\n                /**\r\n                * creates a new notification message\r\n                *\r\n                * @param  {DOMElement} message\tThe notifier message element\r\n                * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                * @param  {Function} callback A callback function to be invoked when the message is dismissed.\r\n                *\r\n                * @return {undefined}\r\n                */\n                function _create(div, callback) {\n\n                    function clickDelegate(event, instance) {\n                        if (!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true') {\n                            instance.dismiss(true);\n                        }\n                    }\n\n                    function transitionDone(event, instance) {\n                        // unbind event\n                        off(instance.element, transition.type, transitionDone);\n                        // remove the message\n                        element.removeChild(instance.element);\n                    }\n\n                    function initialize(instance) {\n                        if (!instance.__internal) {\n                            instance.__internal = {\n                                pushed: false,\n                                delay: undefined,\n                                timer: undefined,\n                                clickHandler: undefined,\n                                transitionEndHandler: undefined,\n                                transitionTimeout: undefined\n                            };\n                            instance.__internal.clickHandler = delegate(instance, clickDelegate);\n                            instance.__internal.transitionEndHandler = delegate(instance, transitionDone);\n                        }\n                        return instance;\n                    }\n                    function clearTimers(instance) {\n                        clearTimeout(instance.__internal.timer);\n                        clearTimeout(instance.__internal.transitionTimeout);\n                    }\n                    return initialize({\n                        /* notification DOM element*/\n                        element: div,\n                        /*\r\n                         * Pushes a notification message\r\n                         * @param {string or DOMElement} content The notification message content\r\n                         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                         *\r\n                         */\n                        push: function push(_content, _wait) {\n                            if (!this.__internal.pushed) {\n\n                                pushInstance(this);\n                                clearTimers(this);\n\n                                var content, wait;\n                                switch (arguments.length) {\n                                    case 0:\n                                        wait = this.__internal.delay;\n                                        break;\n                                    case 1:\n                                        if (typeof _content === 'number') {\n                                            wait = _content;\n                                        } else {\n                                            content = _content;\n                                            wait = this.__internal.delay;\n                                        }\n                                        break;\n                                    case 2:\n                                        content = _content;\n                                        wait = _wait;\n                                        break;\n                                }\n                                this.__internal.closeButton = alertify.defaults.notifier.closeButton;\n                                // set contents\n                                if (typeof content !== 'undefined') {\n                                    this.setContent(content);\n                                }\n                                // append or insert\n                                if (notifier.__internal.position.indexOf('top') < 0) {\n                                    element.appendChild(this.element);\n                                } else {\n                                    element.insertBefore(this.element, element.firstChild);\n                                }\n                                reflow = this.element.offsetWidth;\n                                addClass(this.element, classes.visible);\n                                // attach click event\n                                on(this.element, 'click', this.__internal.clickHandler);\n                                return this.delay(wait);\n                            }\n                            return this;\n                        },\n                        /*\r\n                         * {Function} callback function to be invoked before dismissing the notification message.\r\n                         * Remarks: A return value === 'false' will cancel the dismissal\r\n                         *\r\n                         */\n                        ondismiss: function ondismiss() {},\n                        /*\r\n                         * {Function} callback function to be invoked when the message is dismissed.\r\n                         *\r\n                         */\n                        callback: callback,\n                        /*\r\n                         * Dismisses the notification message\r\n                         * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.\r\n                         *\r\n                         */\n                        dismiss: function dismiss(clicked) {\n                            if (this.__internal.pushed) {\n                                clearTimers(this);\n                                if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {\n                                    //detach click event\n                                    off(this.element, 'click', this.__internal.clickHandler);\n                                    // ensure element exists\n                                    if (typeof this.element !== 'undefined' && this.element.parentNode === element) {\n                                        //transition end or fallback\n                                        this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);\n                                        removeClass(this.element, classes.visible);\n\n                                        // custom callback on dismiss\n                                        if (typeof this.callback === 'function') {\n                                            this.callback.call(this, clicked);\n                                        }\n                                    }\n                                    popInstance(this);\n                                }\n                            }\n                            return this;\n                        },\n                        /*\r\n                         * Delays the notification message dismissal\r\n                         * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.\r\n                         *\r\n                         */\n                        delay: function delay(wait) {\n                            clearTimers(this);\n                            this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;\n                            if (this.__internal.delay > 0) {\n                                var self = this;\n                                this.__internal.timer = setTimeout(function () {\n                                    self.dismiss();\n                                }, this.__internal.delay * 1000);\n                            }\n                            return this;\n                        },\n                        /*\r\n                         * Sets the notification message contents\r\n                         * @param {string or DOMElement} content The notification message content\r\n                         *\r\n                         */\n                        setContent: function setContent(content) {\n                            if (typeof content === 'string') {\n                                clearContents(this.element);\n                                this.element.innerHTML = content;\n                            } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {\n                                clearContents(this.element);\n                                this.element.appendChild(content);\n                            }\n                            if (this.__internal.closeButton) {\n                                var close = document.createElement('span');\n                                addClass(close, classes.close);\n                                close.setAttribute('data-close', true);\n                                this.element.appendChild(close);\n                            }\n                            return this;\n                        },\n                        /*\r\n                         * Dismisses all open notifications except this.\r\n                         *\r\n                         */\n                        dismissOthers: function dismissOthers() {\n                            notifier.dismissAll(this);\n                            return this;\n                        }\n                    });\n                }\n\n                //notifier api\n                return {\n                    /**\r\n                     * Gets or Sets notifier settings.\r\n                     *\r\n                     * @param {string} key The setting name\r\n                     * @param {Variant} value The setting value.\r\n                     *\r\n                     * @return {Object}\tif the called as a setter, return the notifier instance.\r\n                     */\n                    setting: function setting(key, value) {\n                        //ensure init\n                        initialize(this);\n\n                        if (typeof value === 'undefined') {\n                            //get\n                            return this.__internal[key];\n                        } else {\n                            //set\n                            switch (key) {\n                                case 'position':\n                                    this.__internal.position = value;\n                                    updatePosition(this);\n                                    break;\n                                case 'delay':\n                                    this.__internal.delay = value;\n                                    break;\n                            }\n                        }\n                        return this;\n                    },\n                    /**\r\n                     * [Alias] Sets dialog settings/options\r\n                     */\n                    set: function set(key, value) {\n                        this.setting(key, value);\n                        return this;\n                    },\n                    /**\r\n                     * [Alias] Gets dialog settings/options\r\n                     */\n                    get: function get(key) {\n                        return this.setting(key);\n                    },\n                    /**\r\n                     * Creates a new notification message\r\n                     *\r\n                     * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).\r\n                     * @param {Function} callback  A callback function to be invoked when the message is dismissed.\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    create: function create(type, callback) {\n                        //ensure notifier init\n                        initialize(this);\n                        //create new notification message\n                        var div = document.createElement('div');\n                        div.className = classes.message + (typeof type === 'string' && type !== '' ? ' ajs-' + type : '');\n                        return _create(div, callback);\n                    },\n                    /**\r\n                     * Dismisses all open notifications.\r\n                     *\r\n                     * @param {Object} excpet [optional] The notification object to exclude from dismissal.\r\n                     *\r\n                     */\n                    dismissAll: function dismissAll(except) {\n                        var clone = openInstances.slice(0);\n                        for (var x = 0; x < clone.length; x += 1) {\n                            var instance = clone[x];\n                            if (except === undefined || except !== instance) {\n                                instance.dismiss();\n                            }\n                        }\n                    }\n                };\n            }();\n\n            /**\r\n             * Alertify public API\r\n             * This contains everything that is exposed through the alertify object.\r\n             *\r\n             * @return {Object}\r\n             */\n            function Alertify() {\n\n                // holds a references of created dialogs\n                var dialogs = {};\n\n                /**\r\n                 * Extends a given prototype by merging properties from base into sub.\r\n                 *\r\n                 * @sub {Object} sub The prototype being overwritten.\r\n                 * @base {Object} base The prototype being written.\r\n                 *\r\n                 * @return {Object} The extended prototype.\r\n                 */\n                function extend(sub, base) {\n                    // copy dialog pototype over definition.\n                    for (var prop in base) {\n                        if (base.hasOwnProperty(prop)) {\n                            sub[prop] = base[prop];\n                        }\n                    }\n                    return sub;\n                }\n\n                /**\r\n                * Helper: returns a dialog instance from saved dialogs.\r\n                * and initializes the dialog if its not already initialized.\r\n                *\r\n                * @name {String} name The dialog name.\r\n                *\r\n                * @return {Object} The dialog instance.\r\n                */\n                function get_dialog(name) {\n                    var dialog = dialogs[name].dialog;\n                    //initialize the dialog if its not already initialized.\n                    if (dialog && typeof dialog.__init === 'function') {\n                        dialog.__init(dialog);\n                    }\n                    return dialog;\n                }\n\n                /**\r\n                 * Helper:  registers a new dialog definition.\r\n                 *\r\n                 * @name {String} name The dialog name.\r\n                 * @Factory {Function} Factory a function resposible for creating dialog prototype.\r\n                 * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.\r\n                 * @base {String} base the name of another dialog to inherit from.\r\n                 *\r\n                 * @return {Object} The dialog definition.\r\n                 */\n                function register(name, Factory, transient, base) {\n                    var definition = {\n                        dialog: null,\n                        factory: Factory\n                    };\n\n                    //if this is based on an existing dialog, create a new definition\n                    //by applying the new protoype over the existing one.\n                    if (base !== undefined) {\n                        definition.factory = function () {\n                            return extend(new dialogs[base].factory(), new Factory());\n                        };\n                    }\n\n                    if (!transient) {\n                        //create a new definition based on dialog\n                        definition.dialog = extend(new definition.factory(), _dialog);\n                    }\n                    return dialogs[name] = definition;\n                }\n\n                return {\n                    /**\r\n                     * Alertify defaults\r\n                     * \r\n                     * @type {Object}\r\n                     */\n                    defaults: defaults,\n                    /**\r\n                     * Dialogs factory \r\n                     *\r\n                     * @param {string}      Dialog name.\r\n                     * @param {Function}    A Dialog factory function.\r\n                     * @param {Boolean}     Indicates whether to create a singleton or transient dialog.\r\n                     * @param {String}      The name of the base type to inherit from.\r\n                     */\n                    dialog: function dialog(name, Factory, transient, base) {\n\n                        // get request, create a new instance and return it.\n                        if (typeof Factory !== 'function') {\n                            return get_dialog(name);\n                        }\n\n                        if (this.hasOwnProperty(name)) {\n                            throw new Error('alertify.dialog: name already exists');\n                        }\n\n                        // register the dialog\n                        var definition = register(name, Factory, transient, base);\n\n                        if (transient) {\n\n                            // make it public\n                            this[name] = function () {\n                                //if passed with no params, consider it a get request\n                                if (arguments.length === 0) {\n                                    return definition.dialog;\n                                } else {\n                                    var instance = extend(new definition.factory(), _dialog);\n                                    //ensure init\n                                    if (instance && typeof instance.__init === 'function') {\n                                        instance.__init(instance);\n                                    }\n                                    instance['main'].apply(instance, arguments);\n                                    return instance['show'].apply(instance);\n                                }\n                            };\n                        } else {\n                            // make it public\n                            this[name] = function () {\n                                //ensure init\n                                if (definition.dialog && typeof definition.dialog.__init === 'function') {\n                                    definition.dialog.__init(definition.dialog);\n                                }\n                                //if passed with no params, consider it a get request\n                                if (arguments.length === 0) {\n                                    return definition.dialog;\n                                } else {\n                                    var dialog = definition.dialog;\n                                    dialog['main'].apply(definition.dialog, arguments);\n                                    return dialog['show'].apply(definition.dialog);\n                                }\n                            };\n                        }\n                    },\n                    /**\r\n                     * Close all open dialogs.\r\n                     *\r\n                     * @param {Object} excpet [optional] The dialog object to exclude from closing.\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    closeAll: function closeAll(except) {\n                        var clone = openDialogs.slice(0);\n                        for (var x = 0; x < clone.length; x += 1) {\n                            var instance = clone[x];\n                            if (except === undefined || except !== instance) {\n                                instance.close();\n                            }\n                        }\n                    },\n                    /**\r\n                     * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.\r\n                     *\r\n                     * @param {string} name The dialog name.\r\n                     * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.\r\n                     * @param {Variant} value Optional, the value associated with the key (in case it was a string).\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    setting: function setting(name, key, value) {\n\n                        if (name === 'notifier') {\n                            return notifier.setting(key, value);\n                        }\n\n                        var dialog = get_dialog(name);\n                        if (dialog) {\n                            return dialog.setting(key, value);\n                        }\n                    },\n                    /**\r\n                     * [Alias] Sets dialog settings/options \r\n                     */\n                    set: function set(name, key, value) {\n                        return this.setting(name, key, value);\n                    },\n                    /**\r\n                     * [Alias] Gets dialog settings/options \r\n                     */\n                    get: function get(name, key) {\n                        return this.setting(name, key);\n                    },\n                    /**\r\n                     * Creates a new notification message.\r\n                     * If a type is passed, a class name \"ajs-{type}\" will be added.\r\n                     * This allows for custom look and feel for various types of notifications.\r\n                     *\r\n                     * @param  {String | DOMElement}    [message=undefined]\t\tMessage text\r\n                     * @param  {String}                 [type='']\t\t\t\tType of log message\r\n                     * @param  {String}                 [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n                     * @param  {Function}               [callback=undefined]\tA callback function to be invoked when the log is closed.\r\n                     *\r\n                     * @return {Object} Notification object.\r\n                     */\n                    notify: function notify(message, type, wait, callback) {\n                        return notifier.create(type, callback).push(message, wait);\n                    },\n                    /**\r\n                     * Creates a new notification message.\r\n                     *\r\n                     * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n                     * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n                     * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n                     *\r\n                     * @return {Object} Notification object.\r\n                     */\n                    message: function message(_message2, wait, callback) {\n                        return notifier.create(null, callback).push(_message2, wait);\n                    },\n                    /**\r\n                     * Creates a new notification message of type 'success'.\r\n                     *\r\n                     * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n                     * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n                     * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n                     *\r\n                     * @return {Object} Notification object.\r\n                     */\n                    success: function success(message, wait, callback) {\n                        return notifier.create('success', callback).push(message, wait);\n                    },\n                    /**\r\n                     * Creates a new notification message of type 'error'.\r\n                     *\r\n                     * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n                     * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n                     * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n                     *\r\n                     * @return {Object} Notification object.\r\n                     */\n                    error: function error(message, wait, callback) {\n                        return notifier.create('error', callback).push(message, wait);\n                    },\n                    /**\r\n                     * Creates a new notification message of type 'warning'.\r\n                     *\r\n                     * @param  {String}\t\t[message=undefined]\t\tMessage text\r\n                     * @param  {String}     [wait='']\t\t\t\tTime (in seconds) to wait before auto-close\r\n                     * @param  {Function}\t[callback=undefined]\tA callback function to be invoked when the log is closed.\r\n                     *\r\n                     * @return {Object} Notification object.\r\n                     */\n                    warning: function warning(message, wait, callback) {\n                        return notifier.create('warning', callback).push(message, wait);\n                    },\n                    /**\r\n                     * Dismisses all open notifications\r\n                     *\r\n                     * @return {undefined}\r\n                     */\n                    dismissAll: function dismissAll() {\n                        notifier.dismissAll();\n                    }\n                };\n            }\n            var alertify = new Alertify();\n\n            /**\r\n            * Alert dialog definition\r\n            *\r\n            * invoked by:\r\n            *\talertify.alert(message);\r\n            *\talertify.alert(title, message);\r\n            *\talertify.alert(message, onok);\r\n            *\talertify.alert(title, message, onok);\r\n             */\n            alertify.dialog('alert', function () {\n                return {\n                    main: function main(_title, _message, _onok) {\n                        var title, message, onok;\n                        switch (arguments.length) {\n                            case 1:\n                                message = _title;\n                                break;\n                            case 2:\n                                if (typeof _message === 'function') {\n                                    message = _title;\n                                    onok = _message;\n                                } else {\n                                    title = _title;\n                                    message = _message;\n                                }\n                                break;\n                            case 3:\n                                title = _title;\n                                message = _message;\n                                onok = _onok;\n                                break;\n                        }\n                        this.set('title', title);\n                        this.set('message', message);\n                        this.set('onok', onok);\n                        return this;\n                    },\n                    setup: function setup() {\n                        return {\n                            buttons: [{\n                                text: alertify.defaults.glossary.ok,\n                                key: keys.ESC,\n                                invokeOnClose: true,\n                                className: alertify.defaults.theme.ok\n                            }],\n                            focus: {\n                                element: 0,\n                                select: false\n                            },\n                            options: {\n                                maximizable: false,\n                                resizable: false\n                            }\n                        };\n                    },\n                    build: function build() {\n                        // nothing\n                    },\n                    prepare: function prepare() {\n                        //nothing\n                    },\n                    setMessage: function setMessage(message) {\n                        this.setContent(message);\n                    },\n                    settings: {\n                        message: undefined,\n                        onok: undefined,\n                        label: undefined\n                    },\n                    settingUpdated: function settingUpdated(key, oldValue, newValue) {\n                        switch (key) {\n                            case 'message':\n                                this.setMessage(newValue);\n                                break;\n                            case 'label':\n                                if (this.__internal.buttons[0].element) {\n                                    this.__internal.buttons[0].element.innerHTML = newValue;\n                                }\n                                break;\n                        }\n                    },\n                    callback: function callback(closeEvent) {\n                        if (typeof this.get('onok') === 'function') {\n                            var returnValue = this.get('onok').call(this, closeEvent);\n                            if (typeof returnValue !== 'undefined') {\n                                closeEvent.cancel = !returnValue;\n                            }\n                        }\n                    }\n                };\n            });\n            /**\r\n             * Confirm dialog object\r\n             *\r\n             *\talertify.confirm(message);\r\n             *\talertify.confirm(message, onok);\r\n             *\talertify.confirm(message, onok, oncancel);\r\n             *\talertify.confirm(title, message, onok, oncancel);\r\n             */\n            alertify.dialog('confirm', function () {\n\n                var autoConfirm = {\n                    timer: null,\n                    index: null,\n                    text: null,\n                    duration: null,\n                    task: function task(event, self) {\n                        if (self.isOpen()) {\n                            self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';\n                            autoConfirm.duration -= 1;\n                            if (autoConfirm.duration === -1) {\n                                clearAutoConfirm(self);\n                                var button = self.__internal.buttons[autoConfirm.index];\n                                var closeEvent = createCloseEvent(autoConfirm.index, button);\n\n                                if (typeof self.callback === 'function') {\n                                    self.callback.apply(self, [closeEvent]);\n                                }\n                                //close the dialog.\n                                if (closeEvent.close !== false) {\n                                    self.close();\n                                }\n                            }\n                        } else {\n                            clearAutoConfirm(self);\n                        }\n                    }\n                };\n\n                function clearAutoConfirm(self) {\n                    if (autoConfirm.timer !== null) {\n                        clearInterval(autoConfirm.timer);\n                        autoConfirm.timer = null;\n                        self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;\n                    }\n                }\n\n                function startAutoConfirm(self, index, duration) {\n                    clearAutoConfirm(self);\n                    autoConfirm.duration = duration;\n                    autoConfirm.index = index;\n                    autoConfirm.text = self.__internal.buttons[index].element.innerHTML;\n                    autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);\n                    autoConfirm.task(null, self);\n                }\n\n                return {\n                    main: function main(_title, _message, _onok, _oncancel) {\n                        var title, message, onok, oncancel;\n                        switch (arguments.length) {\n                            case 1:\n                                message = _title;\n                                break;\n                            case 2:\n                                message = _title;\n                                onok = _message;\n                                break;\n                            case 3:\n                                message = _title;\n                                onok = _message;\n                                oncancel = _onok;\n                                break;\n                            case 4:\n                                title = _title;\n                                message = _message;\n                                onok = _onok;\n                                oncancel = _oncancel;\n                                break;\n                        }\n                        this.set('title', title);\n                        this.set('message', message);\n                        this.set('onok', onok);\n                        this.set('oncancel', oncancel);\n                        return this;\n                    },\n                    setup: function setup() {\n                        return {\n                            buttons: [{\n                                text: alertify.defaults.glossary.ok,\n                                key: keys.ENTER,\n                                className: alertify.defaults.theme.ok\n                            }, {\n                                text: alertify.defaults.glossary.cancel,\n                                key: keys.ESC,\n                                invokeOnClose: true,\n                                className: alertify.defaults.theme.cancel\n                            }],\n                            focus: {\n                                element: 0,\n                                select: false\n                            },\n                            options: {\n                                maximizable: false,\n                                resizable: false\n                            }\n                        };\n                    },\n                    build: function build() {\n                        //nothing\n                    },\n                    prepare: function prepare() {\n                        //nothing\n                    },\n                    setMessage: function setMessage(message) {\n                        this.setContent(message);\n                    },\n                    settings: {\n                        message: null,\n                        labels: null,\n                        onok: null,\n                        oncancel: null,\n                        defaultFocus: null,\n                        reverseButtons: null\n                    },\n                    settingUpdated: function settingUpdated(key, oldValue, newValue) {\n                        switch (key) {\n                            case 'message':\n                                this.setMessage(newValue);\n                                break;\n                            case 'labels':\n                                if ('ok' in newValue && this.__internal.buttons[0].element) {\n                                    this.__internal.buttons[0].text = newValue.ok;\n                                    this.__internal.buttons[0].element.innerHTML = newValue.ok;\n                                }\n                                if ('cancel' in newValue && this.__internal.buttons[1].element) {\n                                    this.__internal.buttons[1].text = newValue.cancel;\n                                    this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n                                }\n                                break;\n                            case 'reverseButtons':\n                                if (newValue === true) {\n                                    this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n                                } else {\n                                    this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n                                }\n                                break;\n                            case 'defaultFocus':\n                                this.__internal.focus.element = newValue === 'ok' ? 0 : 1;\n                                break;\n                        }\n                    },\n                    callback: function callback(closeEvent) {\n                        clearAutoConfirm(this);\n                        var returnValue;\n                        switch (closeEvent.index) {\n                            case 0:\n                                if (typeof this.get('onok') === 'function') {\n                                    returnValue = this.get('onok').call(this, closeEvent);\n                                    if (typeof returnValue !== 'undefined') {\n                                        closeEvent.cancel = !returnValue;\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (typeof this.get('oncancel') === 'function') {\n                                    returnValue = this.get('oncancel').call(this, closeEvent);\n                                    if (typeof returnValue !== 'undefined') {\n                                        closeEvent.cancel = !returnValue;\n                                    }\n                                }\n                                break;\n                        }\n                    },\n                    autoOk: function autoOk(duration) {\n                        startAutoConfirm(this, 0, duration);\n                        return this;\n                    },\n                    autoCancel: function autoCancel(duration) {\n                        startAutoConfirm(this, 1, duration);\n                        return this;\n                    }\n                };\n            });\n            /**\r\n             * Prompt dialog object\r\n             *\r\n             * invoked by:\r\n             *\talertify.prompt(message);\r\n             *\talertify.prompt(message, value);\r\n             *\talertify.prompt(message, value, onok);\r\n             *\talertify.prompt(message, value, onok, oncancel);\r\n             *\talertify.prompt(title, message, value, onok, oncancel);\r\n             */\n            alertify.dialog('prompt', function () {\n                var input = document.createElement('INPUT');\n                var p = document.createElement('P');\n                return {\n                    main: function main(_title, _message, _value, _onok, _oncancel) {\n                        var title, message, value, onok, oncancel;\n                        switch (arguments.length) {\n                            case 1:\n                                message = _title;\n                                break;\n                            case 2:\n                                message = _title;\n                                value = _message;\n                                break;\n                            case 3:\n                                message = _title;\n                                value = _message;\n                                onok = _value;\n                                break;\n                            case 4:\n                                message = _title;\n                                value = _message;\n                                onok = _value;\n                                oncancel = _onok;\n                                break;\n                            case 5:\n                                title = _title;\n                                message = _message;\n                                value = _value;\n                                onok = _onok;\n                                oncancel = _oncancel;\n                                break;\n                        }\n                        this.set('title', title);\n                        this.set('message', message);\n                        this.set('value', value);\n                        this.set('onok', onok);\n                        this.set('oncancel', oncancel);\n                        return this;\n                    },\n                    setup: function setup() {\n                        return {\n                            buttons: [{\n                                text: alertify.defaults.glossary.ok,\n                                key: keys.ENTER,\n                                className: alertify.defaults.theme.ok\n                            }, {\n                                text: alertify.defaults.glossary.cancel,\n                                key: keys.ESC,\n                                invokeOnClose: true,\n                                className: alertify.defaults.theme.cancel\n                            }],\n                            focus: {\n                                element: input,\n                                select: true\n                            },\n                            options: {\n                                maximizable: false,\n                                resizable: false\n                            }\n                        };\n                    },\n                    build: function build() {\n                        input.className = alertify.defaults.theme.input;\n                        input.setAttribute('type', 'text');\n                        input.value = this.get('value');\n                        this.elements.content.appendChild(p);\n                        this.elements.content.appendChild(input);\n                    },\n                    prepare: function prepare() {\n                        //nothing\n                    },\n                    setMessage: function setMessage(message) {\n                        if (typeof message === 'string') {\n                            clearContents(p);\n                            p.innerHTML = message;\n                        } else if (message instanceof window.HTMLElement && p.firstChild !== message) {\n                            clearContents(p);\n                            p.appendChild(message);\n                        }\n                    },\n                    settings: {\n                        message: undefined,\n                        labels: undefined,\n                        onok: undefined,\n                        oncancel: undefined,\n                        value: '',\n                        type: 'text',\n                        reverseButtons: undefined\n                    },\n                    settingUpdated: function settingUpdated(key, oldValue, newValue) {\n                        switch (key) {\n                            case 'message':\n                                this.setMessage(newValue);\n                                break;\n                            case 'value':\n                                input.value = newValue;\n                                break;\n                            case 'type':\n                                switch (newValue) {\n                                    case 'text':\n                                    case 'color':\n                                    case 'date':\n                                    case 'datetime-local':\n                                    case 'email':\n                                    case 'month':\n                                    case 'number':\n                                    case 'password':\n                                    case 'search':\n                                    case 'tel':\n                                    case 'time':\n                                    case 'week':\n                                        input.type = newValue;\n                                        break;\n                                    default:\n                                        input.type = 'text';\n                                        break;\n                                }\n                                break;\n                            case 'labels':\n                                if (newValue.ok && this.__internal.buttons[0].element) {\n                                    this.__internal.buttons[0].element.innerHTML = newValue.ok;\n                                }\n                                if (newValue.cancel && this.__internal.buttons[1].element) {\n                                    this.__internal.buttons[1].element.innerHTML = newValue.cancel;\n                                }\n                                break;\n                            case 'reverseButtons':\n                                if (newValue === true) {\n                                    this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);\n                                } else {\n                                    this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);\n                                }\n                                break;\n                        }\n                    },\n                    callback: function callback(closeEvent) {\n                        var returnValue;\n                        switch (closeEvent.index) {\n                            case 0:\n                                this.settings.value = input.value;\n                                if (typeof this.get('onok') === 'function') {\n                                    returnValue = this.get('onok').call(this, closeEvent, this.settings.value);\n                                    if (typeof returnValue !== 'undefined') {\n                                        closeEvent.cancel = !returnValue;\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (typeof this.get('oncancel') === 'function') {\n                                    returnValue = this.get('oncancel').call(this, closeEvent);\n                                    if (typeof returnValue !== 'undefined') {\n                                        closeEvent.cancel = !returnValue;\n                                    }\n                                }\n                                if (!closeEvent.cancel) {\n                                    input.value = this.settings.value;\n                                }\n                                break;\n                        }\n                    }\n                };\n            });\n\n            // CommonJS\n            if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n                module.exports = alertify;\n                // AMD\n            } else if (typeof define === 'function' && define.amd) {\n                define([], function () {\n                    return alertify;\n                });\n                // window\n            } else if (!window.alertify) {\n                window.alertify = alertify;\n            }\n        })(typeof window !== 'undefined' ? window : this);\n    }, {}], 2: [function (require, module, exports) {\n        var Alert = require('./dialogs/Alert');\n        var Confirm = require('./dialogs/Confirm');\n        var Notification = require('./overlays/Notification');\n        var Image = require('./overlays/Image');\n\n        window.Alert = {\n            Alert: Alert,\n            Confirm: Confirm,\n            Notification: Notification,\n            Image: Image\n        };\n    }, { \"./dialogs/Alert\": 3, \"./dialogs/Confirm\": 4, \"./overlays/Image\": 5, \"./overlays/Notification\": 6 }], 3: [function (require, module, exports) {\n        var alertify = require('alertifyjs');\n\n        var Alert = function () {\n\n            /**\r\n             * Construct alert\r\n             * @param title\r\n             * @param message\r\n             * @param callback\r\n             */\n            function Alert(title) {\n                var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                _classCallCheck(this, Alert);\n\n                if (message && callback) {\n                    this.title = title;\n                    this.message = message;\n                    this.callback = callback;\n                } else if (message) {\n                    this.title = title;\n                    this.message = message;\n                    this.callback = function () {};\n                } else {\n                    this.title = 'Alert';\n                    this.message = title;\n                    this.callback = function () {};\n                }\n            }\n\n            /**\r\n             * Show the dialog\r\n             */\n\n\n            _createClass(Alert, [{\n                key: \"show\",\n                value: function show() {\n                    alertify.alert(this.title, this.message, this.callback).set({ transition: 'zoom' });\n                }\n\n                /**\r\n                 * Show the alert without new\r\n                 * @param title\r\n                 * @param message\r\n                 * @param callback\r\n                 */\n\n            }], [{\n                key: \"spawn\",\n                value: function spawn(title) {\n                    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n                    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n                    if (message && callback) {\n                        alertify.alert(title, message, callback).set({ transition: 'zoom' });\n                    } else if (message) {\n                        alertify.alert(title, message).set({ transition: 'zoom' });\n                    } else {\n                        alertify.alert(\"Alert\", title).set({ transition: 'zoom' });\n                    }\n                }\n            }]);\n\n            return Alert;\n        }();\n\n        module.exports = Alert;\n    }, { \"alertifyjs\": 1 }], 4: [function (require, module, exports) {\n        var alertify = require('alertifyjs');\n\n        var Confirm = function () {\n\n            /**\r\n             * Construct\r\n             * @param title\r\n             * @param message\r\n             * @param okCallback\r\n             * @param cancelCallback\r\n             */\n            function Confirm(title, message, okCallback) {\n                var cancelCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n                _classCallCheck(this, Confirm);\n\n                this.title = title;\n                this.message = message;\n                this.okCallback = okCallback;\n                this.cancelCallback = cancelCallback;\n            }\n\n            /**\r\n             * Show the notification\r\n             */\n\n\n            _createClass(Confirm, [{\n                key: \"show\",\n                value: function show() {\n                    alertify.confirm(this.title, this.message, this.okCallback, this.cancelCallback).set({ transition: 'zoom' });\n                }\n\n                /**\r\n                 * Spawn a confirm window\r\n                 * @param title\r\n                 * @param message\r\n                 * @param okCallback\r\n                 * @param cancelCallback\r\n                 */\n\n            }], [{\n                key: \"spawn\",\n                value: function spawn(title, message, okCallback) {\n                    var cancelCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n                    alertify.confirm(title, message, okCallback, cancelCallback).set({ transition: 'zoom' });\n                }\n            }]);\n\n            return Confirm;\n        }();\n\n        module.exports = Confirm;\n    }, { \"alertifyjs\": 1 }], 5: [function (require, module, exports) {\n        /**\r\n         * Image overlay plugin\r\n         * This js code depends on styles/chatroom/image-overlay.less stylesheet\r\n         */\n\n        var Image = function () {\n            function Image(src) {\n                _classCallCheck(this, Image);\n\n                this._src = src;\n                this._width = null;\n            }\n\n            /**\r\n             * Show the image overlay\r\n             */\n\n\n            _createClass(Image, [{\n                key: \"show\",\n                value: function show() {\n\n                    // Check to see if #image-overlay already exists\n                    if (document.getElementById(\"image-overlay\")) {\n                        throw \"Image overlay already exists\";\n                    }\n\n                    var container = document.createElement(\"div\");\n                    container.classList.add('img-overlay-container');\n                    container.setAttribute(\"id\", \"image-overlay\");\n                    var backdrop = document.createElement(\"div\");\n                    backdrop.classList.add('backdrop');\n                    var image = document.createElement(\"img\");\n                    image.setAttribute(\"src\", this._src);\n                    image.classList.add('image-body');\n\n                    var controls = document.createElement(\"div\");\n                    controls.classList.add('controls-bar');\n\n                    var closeButton = document.createElement('div');\n                    closeButton.onclick = function (e) {\n                        var element = document.getElementById(\"image-overlay\");\n                        element.outerHTML = \"\";\n                    };\n                    closeButton.innerHTML = \"<span class=\\\"typcn typcn-delete\\\"></span>\";\n                    closeButton.classList.add('control-button');\n\n                    var zoomInButton = document.createElement('div');\n                    zoomInButton.onclick = function (e) {\n                        // Make the image larger\n                        image.setAttribute(\"style\", \"width: \" + image.width * 1.1 + \"px;\");\n                    };\n\n                    zoomInButton.innerHTML = \"<span class=\\\"typcn typcn-zoom-in-outline\\\"></span>\";\n                    zoomInButton.classList.add('control-button');\n\n                    var zoomOutButton = document.createElement('div');\n                    zoomOutButton.onclick = function (e) {\n                        // Make the image smaller\n                        image.setAttribute(\"style\", \"width: \" + image.width * 0.9 + \"px;\");\n                    };\n                    zoomOutButton.innerHTML = \"<span class=\\\"typcn typcn-zoom-out-outline\\\"></span>\";\n                    zoomOutButton.classList.add('control-button');\n\n                    controls.appendChild(zoomInButton);\n                    controls.appendChild(zoomOutButton);\n                    controls.appendChild(closeButton);\n\n                    document.body.appendChild(container);\n                    container.appendChild(backdrop);\n                    container.appendChild(image);\n                    container.appendChild(controls);\n\n                    this._width = image.width;\n                }\n            }]);\n\n            return Image;\n        }();\n\n        module.exports = Image;\n    }, {}], 6: [function (require, module, exports) {\n        var alertify = require('alertifyjs');\n\n        var Notification = function () {\n\n            /**\r\n             * Construct the notification object\r\n             * @param message\r\n             * @param type\r\n             * @param delay\r\n             * @param callback\r\n             */\n            function Notification(message) {\n                var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';\n                var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n                var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n                _classCallCheck(this, Notification);\n\n                this.message = message;\n                this.type = type;\n                this.delay = delay;\n                this.callback = callback;\n            }\n\n            /**\r\n             * Show the notification\r\n             */\n\n\n            _createClass(Notification, [{\n                key: \"show\",\n                value: function show() {\n                    alertify.notify(this.message, this.type, this.delay, this.callback);\n                }\n\n                /**\r\n                 * Spawn a notification without new\r\n                 * @param message\r\n                 * @param type\r\n                 * @param delay\r\n                 * @param callback\r\n                 */\n\n            }], [{\n                key: \"spawn\",\n                value: function spawn(message) {\n                    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';\n                    var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n                    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n\n                    alertify.notify(message, type, delay, callback);\n                }\n            }]);\n\n            return Notification;\n        }();\n\n        module.exports = Notification;\n    }, { \"alertifyjs\": 1 }] }, {}, [2]);"]}